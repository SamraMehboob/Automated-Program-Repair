cam.position . scl ( NUMBER_CONSTANT ) ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Metagun () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
{ indexShard . refresh ( new Engine.Refresh () . force ( REFRESH_FORCE ) ) ; }
@ Override public void update ( float delta ) { if ( input . justTouched () ) { isDone = true ; } }
if ( ( filter ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Bouncy () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; }
if ( ( this . listener ) != null ) this . listener . dispose ( app ) ;
{ super . onCreate ( savedInstanceState ) ; setTitle ( saved_filters_title ) ; setContentView ( issue_filter_list ) ; }
return ( ( a * a ) + ( b * b ) ) + ( c * c ) ;
loadingView = getLayoutInflater () . inflate ( comment_load_item , null ) ;
{ return new IOSFileHandle ( new File ( IOSFiles.internalPath , path ) , FileType.Internal ) ; }
deleteByQueryRequest . query ( RestActions . parseQuerySource ( request ) ) ;
{ XContentBuilder builder = XContentFactory . contentBuilder ( contentType ) ; toXContent ( builder , EMPTY_PARAMS ) ; return builder . underlyingStream () ; }
return wrapSmartNameQuery ( mltQuery , smartNameFieldMappers , parseContext ) ;
int type = Shape . jniGetType ( shapeAddr ) ;
new com.badlogic.gdx.backends.jogl.JoglApplication ( new com.badlogic.gdx.tests.ETC1Test () , config ) ;
vboBatch = new SpriteBatch ( NUMBER_CONSTANT , VertexDataType.VertexBufferObject ) ;
{ try { channel . sendResponse ( response ) ; } catch ( Throwable e ) { onFailure ( e ) ; } }
Query query = new DeletionAwareConstantScoreQuery ( Queries.MATCH_ALL_FILTER , true ) ;
if ( object == null ) continue;
ui = new Stage () ;
SpriteBatch spriteBatch = ( ( SpriteBatch ) ( stage . getSpriteBatch () ) ) ;
@ Override public Class < ? extends DirectoryService > shardDirectory () { return MockRamDirectoryService . class ; }
return new ShortValuesComparator ( indexFieldData , dMissingValue , numHits , reversed ) ;
( queueSize <= NUMBER_CONSTANT ? new LinkedTransferQueue < Runnable > () : new ArrayBlockingQueue < Runnable > ( queueSize ) )
{ return execute ( new TransportNodesListShardStoreMetaData.Request ( shardId , onlyUnallocated , nodesIds ) . setTimeout ( timeout ) ) ; }
lastTotalTranslogOperations = translogSnapshot . estimatedTotalOperations () ;
BytesStreamOutput out = cachedEntry . bytes () ;
Queries . isConstantMatchAllQuery ( query () )
buffers [ i ] = GL15 . glGenBuffers () ;
System . arraycopy ( value , NUMBER_CONSTANT , chars , length , value.length ) ;
BytesStreamInput in = new BytesStreamInput ( data , false ) ;
if ( ( dateTimeFormatter . locale () ) != null ) { builder . field ( STRING_CONSTANT , dateTimeFormatter . locale () ) ; }
NumericUtils . intToPrefixCoded ( parseValue ( value ) , NUMBER_CONSTANT , bytesRef ) ;
node . client () . admin () . indices () . putMapping ( putMappingRequest ( STRING_CONSTANT ) . source ( mapping ) ) . actionGet () ;
{ startActivity ( ViewIssuesActivity . createIntent ( items , ( position - ( getListAdapter () . getHeadersCount () ) ) ) ) ; }
{ logger . warn ( STRING_CONSTANT , pingResponse , response.id ) ; }
return new CountResponse ( count , shardsResponses . length () , successfulShards , failedShards , shardFailures ) ;
BytesHolder bytes = in . readBytesReference () ;
return ( ! ( TextUtils . isEmpty ( loginText . getText () ) ) ) && ( ! ( TextUtils . isEmpty ( passwordText . getText () ) ) ) ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new SuperJumper () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
final TransportService transportService = new TransportService ( new org.elasticsearch.transport.netty.NettyTransport ( settings , threadPool ) , threadPool ) . start () ;
gl . glGetIntegerv ( GL_MAX_TEXTURE_UNITS , buffer ) ;
GdxTest test = new TiledMapBench () ;
getRequest . operationThreaded ( true ) ;
String [] indices = currentState . metaData () . concreteIndicesIgnoreMissing ( request . filteredIndices () ) ;
entries . close () ;
result = metaDataService . putMapping ( indices , request . type () , request . mappingSource () , request . ignoreConflicts () , request . timeout () )
int size = NUMBER_CONSTANT ;
DocIdSet docIdSet = filter . getDocIdSet ( hitContext . readerContext () , null ) ;
return wrapSmartNameQuery ( query , smartNameFieldMappers , parseContext ) ;
@ Override public String header ( String name ) { return request . getHeader ( name ) ; }
int total = count = Math . min ( available , count ) ;
{ builder . dateTimeFormatter ( parseDateTimeFormatter ( fieldNode . toString () ) ) ; }
ids [ i ] = ( ( int ) ( Long . parseLong ( array [ i ] . trim () ) ) ) ;
if ( hasDocValues () ) { addDocValue ( context , fields , value ) ; }
new JsonHttpResponse ( request , PRECONDITION_FAILED , JsonBuilder . jsonBuilder () . startObject () . field ( STRING_CONSTANT , e . getMessage () ) . endObject () )
modules . add ( new IndexModule ( indexSettings ) ) ;
renderer . begin ( Line ) ;
builder . field ( STRING_CONSTANT , nodeInfo . node () . name () , NONE ) ;
XContentBuilder builder = restContentBuilder ( request , null ) ;
if ( ( lastTick ) > NUMBER_CONSTANT ) tick ( ( ( ( lastTick ) - t ) * ( PerformanceCounters.nano2seconds ) ) ) ;
{ return new org.elasticsearch.common.lucene.all.AllTermQuery ( names () . createIndexNameTerm ( value ) ) ; }
loadingView = inflater . inflate ( load_item , null ) ;
Histogram.Bucket bucket = histo . getBucketByKey ( NUMBER_CONSTANT ) ;
try { executor . awaitTermination ( Long.MAX_VALUE , TimeUnit.SECONDS ) ; } catch ( InterruptedException e ) { new GdxRuntimeException ( STRING_CONSTANT ) ; }
gatewayRecoveryStatus . index () . reusedTotalSize ()
assertThat ( searchResponse . getHits () . totalHits () , equalTo ( NUMBER_CONSTANT ) ) ;
Array < AssetDescriptor > dependencies = new Array < AssetDescriptor > () ;
return wrapSmartNameFilter ( filter , smartNameFieldMappers , parseContext ) ;
BenchmarkTestUtil . randomRequest ( client () , new String [] { BenchmarkNegativeTest.INDEX_NAME } , internalCluster () . size () , null )
RoutingNodes routingNodes = clusterState . routingNodes () ;
public SearchRequestBuilder setHighlighterPostTags ( String . . . postTags ) { highlightBuilder () . postTags ( postTags ) ; return this ; }
{ try { monitorLongGc () ; } catch ( Throwable t ) { logger . debug ( STRING_CONSTANT , t ) ; } }
deps = new Array < AssetDescriptor > () ;
BytesStreamOutput out = CachedStreamOutput . popEntry () . cachedBytes () ;
vertices [ idx ] = v ;
deps = new Array () ;
GdxTest test = new Scene2dTest () ;
Document doc = docMapper . parse ( json ) . masterDoc () ;
out . writeBytesReference ( content ) ;
private void dismissProgress () { if ( ( progress ) != null ) progress . dismiss () ; }
Throwable exception
listener . onResponse ( new SearchResponse ( internalResponse , scrollId , expectedSuccessfulOps , successfulOps . get () , buildTookInMillis () , buildShardFailures () ) ) ;
return typeParser . parse ( name , dynamicTemplate . mappingForName ( name , dynamicType ) , parserContext ) ;
ThreadPool threadPool = internalCluster () . getDataNodeInstance ( ThreadPool . class ) ;
Initializer.InjectableReference < T > initializable = new Initializer.InjectableReference ( injector , instance , source ) ;
{ super . onCreate ( savedInstanceState ) ; initialize ( new Bouncy () ) ; }
return resources . getString ( repositories ) ;
localAxis1 . set ( bodyA . getLocalVector ( axis ) ) ;
{ script . setNextReader ( context ) ; return this ; }
result = result . getCause () ;
highlighter = new CustomPostingsHighlighter ( passageFormatter , values , true , ( ( Integer.MAX_VALUE ) - NUMBER_CONSTANT ) , scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
return new FullGist ( gist , service . isStarred ( id ) , comments ) ;
if ( ( request . scroll () ) != null ) { scrollId = buildScrollId ( request . searchType () , queryFetchResults . values () , null ) ; }
handler . handleException ( new TransportException ( STRING_CONSTANT , new InternalException ( action , request ) ) ) ;
this . graphics = new IOSGraphics ( getBounds ( null ) , this , config , input , gl20 ) ;
emitter . setSprite ( new Sprite ( graphics . newTexture ( file , Nearest , Nearest , ClampToEdge , ClampToEdge ) ) ) ;
assertThat ( fragment , equalTo ( STRING_CONSTANT ) ) ;
{ writeAllowed () ; if ( logger . isTraceEnabled () ) { logger . trace ( STRING_CONSTANT , flush ) ; } engine . flush ( flush ) ; }
GdxTest test = new ModelTest () ;
world . addConstructor ( STRING_CONSTANT , new BulletConstructor ( barMesh , NUMBER_CONSTANT ) ) ;
if ( context == null ) { return super . termsFilter ( values , context ) ; }
if ( ( this . type ) != ( other.type ) ) return false ;
hud . getViewport () . update ( width , height , true ) ;
input . processEvents () ;
View fileView = inflater . inflate ( gist_file_item , null ) ;
TopChildrenQuery childQuery = new TopChildrenQuery ( query , childType , parentType , scoreType , factor , incrementalFactor ) ;
{ JoglApplicationConfiguration config = new JoglApplicationConfiguration () ; new com.badlogic.gdx.backends.jogl.JoglApplication ( new com.badlogic.gdx.tests.InputTest () , config ) ; }
final Set < IntsRef > ref = SpecialOperations . getFiniteStrings ( automaton , ( - NUMBER_CONSTANT ) ) ;
public void log ( String tag , String message , Throwable exception ) ;
this . world . fixtures . remove ( fixture.addr ) ;
List < ContextDocIdSet > nestedEntries = new java.util.ArrayList ( docSets . size () ) ;
String builtMapping = docMapper . mappingSource () . string () ;
ptr != end
catch ( Throwable e ) { onFailure ( e ) ; }
int sizeNeeded = ( ( size ) + length ) - offset ;
request . index ( metaData . concreteSingleIndex ( request . index () ) ) ;
newSnapshot . seekForward ( memorySnapshot . position () ) ;
setBackground ( background ) ;
XContentParser parser = XContentFactory . xContent ( contentType ) . createParser ( source , offset , length ) ;
final String [] nodesIds = state . nodes () . resolveNodesIds ( request.nodesIds ) ;
catch ( Throwable e ) { logger . error ( STRING_CONSTANT , e ) ; }
Explanation functionExplanation = function . explainScore ( doc , subQueryExpl . getValue () ) ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new VeryAngryRobotsGame () , STRING_CONSTANT , DesktopStarter.WINDOW_WIDTH , DesktopStarter.WINDOW_HEIGHT , false ) ; }
BufferUtils . copy ( vertices , sourceOffset , count , buffer ) ;
{ return new RamAccountingTermsEnum ( filteredEnum , breaker , this , STRING_CONSTANT ) ; }
( ( ( w >= ( other.portraitHeight ) ) && ( ( other.portraitHeight ) >= ( best.portraitHeight ) ) ) && ( h >= ( other.portraitWidth ) ) )
boolean skip = testSection . getSkipSection () . skip ( parseContext . getCurrentVersion () ) ;
public PercolateRequestBuilder setScore ( boolean score ) { sourceBuilder () . setTrackScores ( score ) ; return this ; }
touchEventPool . free ( touchEvents ) ;
if ( impulse != null ) { ball . applyLinearImpulse ( impulse , ball . getWorldCenter () , true ) ; flashForFrames ( NUMBER_CONSTANT ) ; }
indexShard . postRecovery ( STRING_CONSTANT ) ;
camera = new OrthographicCamera ( app . getGraphics () ) ;
cam.position . mul ( NUMBER_CONSTANT ) ;
Exception exception
StreamOutput out = cachedEntry . handles () ;
Factories . createFromFlatOrdinals ( nativeOrdinals , termOrd , fieldDataType . getSettings () )
private void showSource () { editor . setSource ( file . getFilename () , file . getContent () , false ) ; }
centroid.y = ( ( y1 + y2 ) + y3 ) / NUMBER_CONSTANT ;
arrayPool . free ( usedArrays ) ;
byte [] buffer = new byte [ blobStore . bufferSizeInBytes () ] ;
ListView view = ( ( ListView ) ( inflater . inflate ( dialog_list_view , null ) ) ) ;
blobsBuilder . put ( name , new org.elasticsearch.common.blobstore.support.PlainBlobMetaData ( name , summary . getSize () ) ) ;
final TransportRequestHandler handler = transportServiceAdapter . handler ( action , version ) ;
BaseBulletTest . init () ;
{ UAX29URLEmailTokenizer tokenizer = new UAX29URLEmailTokenizer ( version , reader ) ; tokenizer . setMaxTokenLength ( maxTokenLength ) ; return tokenizer ; }
if ( changed ) { clear ( STRING_CONSTANT ) ; }
public void resize ( int width , int height ) { stage . getViewport () . update ( width , height , true ) ; }
public void draw ( SpriteBatch batch , float parentAlpha ) { validate () ; super . drawChildren ( batch , parentAlpha ) ; }
internalTickCallback = new InternalTickTest.TestInternalTickCallback ( ( ( btDynamicsWorld ) ( world.collisionWorld ) ) ) ;
{ if ( smartNameFieldMappers . hasMapper () ) { filter = smartNameFieldMappers . mapper () . rangeFilter ( from , to , includeLower , includeUpper , parseContext ) ; } }
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_gists ) ; }
ChannelBuffer buffer = ChannelBuffers . wrappedBuffer ( cachedEntry . bytes () . underlyingBytes () , NUMBER_CONSTANT , cachedEntry . bytes () . size () ) ;
assertThat ( ScriptFilterSearchTests.scriptCounter . get () , equalTo ( ( internalCluster () . hasFilterCache () ? NUMBER_CONSTANT : NUMBER_CONSTANT ) ) ) ;
catch ( CircuitBreakingException e ) { this . addWithoutBreaking ( ( - bytes ) ) ; throw e ; }
if ( ! ( target.actor . isAscendantOf ( hit ) ) ) continue;
final boolean termsAsArray = request . paramAsBoolean ( STRING_CONSTANT , true ) ;
allocation . routingNodes () . assign ( shardRouting , routingNode . nodeId () ) ;
{ return bitmapFont . computeVisibleGlyphs ( str , start , end , width ) ; }
wipeIndices ( STRING_CONSTANT ) ;
{ if ( ! ( enabled ) ) { return null ; } return new CustomIntegerNumericField ( this , context . source () . length () ) ; }
@ Override public void update ( float delta ) { if ( input . isTouched () ) { isDone = true ; } }
{ values [ i ] = indexFieldDatas [ i ] . load ( context ) . getBytesValues () ; }
PercolatorExecutor.Response percolate = percolatorService . percolate ( new PercolatorExecutor.SourceRequest ( request . source () ) ) ;
try { executor . awaitTermination ( Long.MAX_VALUE , TimeUnit.SECONDS ) ; } catch ( InterruptedException e ) { throw new GdxRuntimeException ( STRING_CONSTANT , e ) ; }
ImmutableList < String > indices = ImmutableList . copyOf ( metaData . concreteIndices ( request . indicesOptions () , request . indices () ) ) ;
bind ( ShardsAllocator . class ) . to ( ( ( shardsAllocator ) == null ? BalancedShardsAllocator . class : shardsAllocator ) ) . asEagerSingleton () ;
{ logger . info ( STRING_CONSTANT ) ; if ( ( stream ) != null ) { stream . cleanUp () ; stream . shutdown () ; } }
i < ( ( cluster () . size () ) * NUMBER_CONSTANT )
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new BulletTestCollection () , config ) ; }
if ( atomicFieldData != null ) { return MIN . select ( atomicFieldData . getOrdinalsValues () ) ; } else { return DocValues . emptySorted () ; }
{ return new InternalSearchRequest ( shardRouting , NUMBER_CONSTANT ) . source ( builder . buildAsBytes () ) ; }
if ( keycode != ( Keys.SPACE ) ) return false ;
return new ViewHoldingListAdapter < SearchRepository > ( items , ViewInflator . viewInflatorFor ( getActivity () , repo_search_list_item ) , ReflectiveHolderFactory . reflectiveFactoryFor ( SearchRepoViewHolder . class ) ) ;
threadPool . generic ()
this . audio = new IOSAudio () ;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new DownloadTest () , config ) ; }
internalCluster () . startNodesAsync ( settings , EMPTY ) . get () ;
GdxTest test = new FullscreenTest () ;
for ( String failure : validationFailures ) { out . writeString ( failure ) ; }
{ Document document = new Document () ; document . add ( new org.apache.lucene.document.StoredField ( SourceFieldMapper.NAME , source ) ) ; return document ; }
{ channel . sendResponse ( new BytesRestResponse ( request , e ) ) ; }
badlogicSmall . flip ( true , true ) ;
@ Override public boolean isEmpty () { return ( size () ) == NUMBER_CONSTANT ; }
if ( loc != NUMBER_CONSTANT ) { found = true ; proc . onOrdinal ( docId , loc ) ; }
throw new IllegalStateException ( String . format ( STRING_CONSTANT , result ) ) ;
if ( ! ( request . hasParam ( STRING_CONSTANT ) ) ) { builder . prettyPrint () ; }
try { writer . close () ; return true ; } catch ( Throwable e ) { return false ; }
{ gl . glClear ( GL_COLOR_BUFFER_BIT ) ; stage . act ( graphics . getDeltaTime () ) ; stage . draw () ; }
stage = new Stage ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ;
if ( ( interval ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; }
final ObjectIntOpenHashMap < String > nodeCounts = new ObjectIntOpenHashMap () ;
terminate ( threadPool ) ;
{ ScriptTermsStringFieldFacetExecutor . this . missing = missing ; ScriptTermsStringFieldFacetExecutor . this . total = total ; }
{ LabelDrawableSpan . setText ( labelsArea , labels ) ; labelsArea . setVisibility ( VISIBLE ) ; }
ClusterState clusterState = ClusterState . builder ( org.elasticsearch.cluster.ClusterName.DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build () ;
executor = EsExecutors . newScaling ( NUMBER_CONSTANT , concurrentConnects , NUMBER_CONSTANT , TimeUnit.SECONDS , threadFactory ) ;
{ lockFactory = new XNativeFSLockFactory () ; }
if ( node == null ) { throw new ConnectTransportException ( null , STRING_CONSTANT ) ; }
channel . sendResponse ( new BytesRestResponse ( RestStatus.OK , builder ) ) ;
@ Override public Preferences getPreferences ( String name ) { return new IOSPreferences () ; }
mesh . render ( GL_TRIANGLE_FAN ) ;
{ parameterTypes [ i ] = parameters [ i ] . getClazz () ; }
public static void registerStreams () { InternalCountDateHistogramFacet . registerStreams () ; InternalFullDateHistogramFacet . registerStreams () ; }
{ builder . put ( file . getName () , new PlainBlobMetaData ( file . getName () , file . length () ) ) ; }
font = new BitmapFont ( files . internal ( STRING_CONSTANT ) , true ) ;
if ( value == null ) { return null ; }
{ if ( ( nodeStoreFilesMetaData . storeFilesMetaData () ) != null ) { shardStores . put ( nodeStoreFilesMetaData . getNode () , nodeStoreFilesMetaData . storeFilesMetaData () ) ; } }
GdxTest test = new TiledMapBench () ;
RoutingAllocation.Result routingResult = master.allocationService . reroute ( newClusterStateBuilder () . state ( updatedState ) . build () ) ;
immutableCluster () . wipeIndices ( STRING_CONSTANT ) ;
{ builder . rawField ( STRING_CONSTANT , source , offset , length ) ; }
if ( os == ( TargetOs.MacOsX ) ) { libPrefix = STRING_CONSTANT ; libSuffix = STRING_CONSTANT ; }
indexShard . acquireSearcher ( STRING_CONSTANT , WRITE )
{ super . onSuccess ( gist ) ; ( ( Activity ) ( getContext () ) ) . startActivityForResult ( GistsViewActivity . createIntent ( gist ) , RequestCodes.GIST_VIEW ) ; }
( ( ( ( ( STRING_CONSTANT + ( ids [ i ] ) ) + STRING_CONSTANT ) + i ) + STRING_CONSTANT ) + shardStatus )
ui = new Stage ( graphics . getWidth () , graphics . getHeight () , true ) ;
BroadcastOperationThreading operationThreading = BroadcastOperationThreading . fromString ( request . param ( STRING_CONSTANT ) , THREAD_PER_SHARD ) ;
client () . admin () . indices () . prepareDelete ( STRING_CONSTANT ) . get () ;
return org.elasticsearch.Version . indexCreated ( indexSettings ) . luceneVersion ;
@ Override public String header ( String name ) { return request . headers () . get ( name ) ; }
executor = ( executor == null ) ? threadPool . generic () : executor ;
font = new BitmapFont ( files . internal ( STRING_CONSTANT ) , false ) ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Metagun () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; }
cluster () . ensureAtLeastNumDataNodes ( ( NUMBER_CONSTANT + replica ) ) ;
return distance < ( radiusSum * radiusSum ) ;
{ clusterName = ClusterName . readClusterName ( in ) ; clusterState = Builder . readFrom ( in , null ) ; }
model . getBoundingBox ( bbox ) ;
XContentBuilder builder = new XContentBuilder ( XContentFactory . xContent ( contentType ) , cachedEntry . bytes () , cachedEntry ) ;
startActivityForResult ( ViewGistActivity . createIntent ( gist ) , GistsActivity.REQUEST_VIEW ) ;
if ( request . recycler () ) { logger . debug ( STRING_CONSTANT , service . index () ) ; clearedAtLeastOne = true ; }
if ( ( filter ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; }
badlogicSmall . getRegion () . flip ( true , true ) ;
threadPool . generic () . execute ( new Runnable () { @ Override public void run () { innerMappingRefresh ( request ) ; } } )
IndicesService indicesService = internalCluster () . getInstance ( IndicesService . class ) ;
( ( ( Double . toString ( point . lat () ) ) + CHAR_CONS ) + ( Double . toString ( point . lon () ) ) )
cluster () . wipeIndices ( STRING_CONSTANT ) ;
return optimizeQuery ( fixNegativeQueryIfNeeded ( query ) ) ;
if ( ( script ) != null ) { script . setNextReader ( context ) ; }
target_fuzzy_pos . set ( target.collisionCenter ) . add ( random . scl ( NUMBER_CONSTANT ) ) ;
{ queries . put ( BytesRef . deepCopyOf ( id ) , parseQuery ) ; }
return clusterState . routingTable () . index ( request . index () ) . randomAllActiveShardsIt () ;
parseMultiField ( builder , name , parserContext , propName , propNode ) ;
builder . startObject ( indexDeleteByQueryResponse . index () , NONE ) ;
catch ( Exception e ) { throw new TranslogException ( shardId , STRING_CONSTANT , e ) ; }
deps = new Array () ;
{ return new org.elasticsearch.common.xcontent.json.JsonXContentParser ( SmileXContent.smileFactory . createParser ( reader ) ) ; }
public IndicesAliasesRequestBuilder setTimeout ( TimeValue timeout ) { request . setTimeout ( timeout ) ; return this ; }
data.lineHeight = ( data.lineHeight ) * x ;
model = MD5Loader . loadModel ( files . internal ( STRING_CONSTANT ) . read () , true ) ;
{ stage . getViewport () . update ( width , height , true ) ; }
bigArrays . adjustBreaker ( ( - ( ramBytesUsed () ) ) ) ;
{ if ( ( indexSettings ) == null ) { return null ; } return Version . indexCreated ( indexSettings ) ; }
GL10 gl = Gdx.gl10 ;
client () . preparePercolate () . setIndices ( STRING_CONSTANT , STRING_CONSTANT ) . setDocumentType ( STRING_CONSTANT ) . setIndicesOptions ( IndicesOptions . lenientExpandOpen () )
@ Override public ImmutableSet < Integer > shardIds () { return shards . keySet () ; }
Array < AssetDescriptor > deps = new Array < AssetDescriptor > () ;
collisionWorld . rayTest ( rayFrom , rayTo , rayTestCB ) ;
return clusterState . routingTable () . index ( request . index () ) . randomAllShardsIt () ;
new File ( new File ( nodeEnv . nodeDataLocation () , STRING_CONSTANT ) , shardId . index () . name () )
DistanceUnit unit = DistanceUnit.DEFAULT ;
{ partIndices [ k ] = ( ( short ) ( value . asInt () ) ) ; }
( isDisabled () ) && ( ( style.imageDisabled ) != null )
mltRequest . minimumShouldMatch ( request . param ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new BulletTestCollection () , config ) ; }
out . writeBytesReference ( querySource ) ;
if ( ( text == null ) && ( request . hasContent () ) ) { text = request . content () . toUtf8 () ; }
float subQueryScore
return name ;
ImmutableSettings.Builder settingsBuilder = settingsBuilder () . put ( settings ) ;
if ( ( interval ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
final InternalAggregations aggs = InternalAggregations . reduce ( subAggregationsList , reduceContext ) ;
terms . trimExcessEntries ( reduceContext . cacheRecycler () ) ;
map . setOwnedTextures ( textures . values () . toArray () ) ;
shardStatus.translogOperations = indexShard . translog () . numberOfOperations () ;
clusterStateRequest . clear () . nodes ( true ) ;
BytesStreamInput in = new BytesStreamInput ( out . copiedByteArray () , false ) ;
NumericUtils . longToPrefixCoded ( parseValue ( value ) , NUMBER_CONSTANT , bytesRef ) ;
cluster () . getDataNodeInstances ( RepositoriesService . class )
int sizeNeeded = ( size ) + length ;
SearchResponse searchResponse = client () . prepareSearch () . setQuery ( matchQuery ( STRING_CONSTANT , key ) ) . execute () . actionGet () ;
setBackground ( background , ( background != null ) ) ;
singlePingRequest . operationThreaded ( true ) ;
new org.elasticsearch.search.internal.ShardSearchRequest ( request ) . types ( request . types () ) . filteringAliases ( request . filteringAliases () ) . nowInMillis ( request . nowInMillis () )
diffuse . setFilter ( MipMap , Linear ) ;
cb . getHitPointWorld ( tmpV ) ;
distanceValues = GeoDistance . distanceValues ( geoValues , distance ) ;
catch ( Exception e ) { listener . onFailure ( new ReduceSearchPhaseException ( STRING_CONSTANT , STRING_CONSTANT , e , buildShardFailures () ) ) ; }
setActivityIntent ( EditIssueActivity . createIntent ( repo ) ) ;
catch ( Throwable e ) { logger . warn ( STRING_CONSTANT , e ) ; }
System . arraycopy ( value , NUMBER_CONSTANT , value , length , value.length ) ;
if ( request.request . fieldData () ) { stats.stats.fieldData = indexShard . fieldDataStats ( request.request . fieldDataFields () ) ; }
{ super . dispose () ; if ( ( internalTickCallback ) != null ) internalTickCallback . dispose () ; internalTickCallback = null ; }
public Quaternion setFromAxis ( Vector3 axis , float angle ) { return setFromAxis ( axis.x , axis.y , axis.z , angle ) ; }
AbortBenchmarkRequestBuilder prepareAbortBench ( String . . . benchmarkNames ) ;
if ( terms == null ) { return FloatArrayAtomicFieldData . empty ( reader . maxDoc () ) ; }
constructors . put ( STRING_CONSTANT , new BulletConstructor ( barMesh , NUMBER_CONSTANT ) ) ;
Document doc = docMapper . parse ( json ) . rootDoc () ;
putMappingRequest . source ( request . contentAsString () ) ;
JsonBuilder builder = JsonBuilder . jsonBuilder () ;
slidingPlaneNormal . set ( newPosition ) . sub ( packet . getIntersectionPoint () ) . nor () ;
logger . trace ( STRING_CONSTANT , request . index () , request . type () ) ;
{ return new Matchers.Not ( p ) ; }
{ filter = context . queryParserService () . parseInnerFilter ( parser ) . filter () ; }
dst [ i ] = ( src [ ii ] ) * scale ;
out . scale ( scale.x , scale.y , scale.z ) ;
changed ( ( ( ChangeListener.ChangeEvent ) ( event ) ) , event . getTarget () ) ;
if ( terms == null ) { return DoubleArrayAtomicFieldData . empty ( reader . maxDoc () ) ; }
assert fieldname . equals ( indexFieldData . getFieldNames () . indexName () ) ;
Query facetQuery = indexQueryParser . parse ( parser ) . query () ;
builder . startObject ( name ) ;
return ( MathUtils.radiansToDegrees ) * angle ;
if ( ( ( excluded ) != null ) && ( excluded . contains ( new BytesRef ( value ) ) ) ) { return false ; }
data.lineHeight = ( data.lineHeight ) * y ;
final TextButton flickBbutton = new TextButton ( STRING_CONSTANT , skin . get ( STRING_CONSTANT , TextButtonStyle . class ) ) ;
if ( ( lastTick ) > NUMBER_CONSTANT ) tick ( ( ( t - ( lastTick ) ) * ( PerformanceCounters.nano2seconds ) ) ) ;
values = indexFieldData . load ( context ) . getBytesValues () ;
{ bulkRequest . add ( data , contentUnsafe , defaultIndex , defaultType , payload , true ) ; executeIfNeeded () ; return this ; }
return context . getString ( bookmarks ) ;
HandlesStreamOutput out = CachedStreamOutput . cachedHandles () ;
cluster () . stopRandomNonMasterNode () ;
String name = STRING_CONSTANT + ( buildNodeName () ) ;
return new PagedBytesAtomicFieldData ( bytesReader , termOrdToBytesOffsetReader , Factories . createFromFlatOrdinals ( nativeOrdinals , termOrd , fieldDataType . getSettings () ) ) ;
( ( btRigidBody ) ( entity.body ) ) . applyCentralImpulse ( ray.direction . scl ( impulse ) ) ;
routingTableBuilder . addAsRecovery ( indexMetaData ) ;
long t = attr . getType () ;
if ( frequently () ) { conf . setMergePolicy ( INSTANCE ) ; }
FlickScrollPane scroll = new FlickScrollPane ( table , stage ) ;
return new LongValuesComparator ( indexFieldData , dMissingValue , numHits , reversed ) ;
buckets . close () ;
builder . startObject ( MetricsAggregationBuilder . getName () ) . startObject ( type ) ;
{ out . writeBoolean ( true ) ; out . writeUTF ( type ) ; }
{ request . index ( state . metaData () . concreteSingleIndex ( request . index () ) ) ; return true ; }
builder . startObject ( TYPE ) ;
Gdx.gl = Gdx.gl20 ;
project.files . add ( new ProjectFile ( STRING_CONSTANT , true ) ) ;
{ position.x = x ; position.y = y ; return true ; }
builder . startObject ( indexMetaData . index () , NONE ) ;
if ( sourceField != null ) { return documentMapper . sourceMapper () . nativeValue ( sourceField ) ; }
Query booleanQuery = createBooleanQuery ( field , queryText , lowFreqOccur ) ;
protected ClusterHealthStatus ensureSearchable ( String . . . indices ) { return ensureGreen ( indices ) ; }
query = new org.apache.lucene.search.FilteredQuery ( query , parseContext . cacheFilter ( childDocMapper . typeFilter () , null ) ) ;
new org.elasticsearch.index.settings.IndexSettingsModule ( index , settings )
while ( iter . hasNext () ) if ( ! ( NewsEventViewHolder . isValid ( iter . next () ) ) ) iter . remove () ;
{ parameterTypes [ i ] = parameters [ i ] . getType () ; }
{ if ( capacity < NUMBER_CONSTANT ) { throw new IllegalArgumentException () ; } return BufferFactory . newDirectByteBuffer ( capacity ) ; }
FieldMapper fieldMapper = context . smartNameFieldMapper ( fieldName ) ;
return new DoubleValuesComparator ( indexFieldData , dMissingValue , numHits , reversed ) ;
client . admin () . indices () . putMapping ( putMappingRequest ( STRING_CONSTANT ) . source ( mapping () ) ) . actionGet () ;
headerView . findViewById ( v_labels )
if ( output != null ) listener . input ( output ) ; else listener . canceled () ;
client . admin () . indices () . prepareDelete ( STRING_CONSTANT ) . execute () . actionGet () ;
{ forceRefresh () ; return; }
project.files . add ( new ProjectFile ( STRING_CONSTANT , true ) ) ;
if ( ( terms . size () ) >= ( maxExpansions ) ) { break; }
clusterState = Builder . readFrom ( in , null , clusterName ) ;
channel . sendResponse ( new org.elasticsearch.rest.XContentRestResponse ( request , response . status () , builder ) ) ;
SearchScript searchScript = new SearchScript ( context . lookup () , scriptLang , script , vars , parseContext . scriptService () ) ;
{ filter = smartNameFieldMappers . mapper () . rangeFilter ( null , null , true , true , parseContext ) ; }
texturePackerSettings.bleed = true ;
{ return line ( start.x , start.y , end.y , end.y ) ; }
public void setTapSquareSize ( int tapSquareSize ) { this . tapSquareSize = tapSquareSize ; }
MultiTermVectorsItemResponse [] responseItems = requestBuilder . get () . getResponses () ;
if ( ! ( command instanceof Comparable ) ) { command = PrioritizedRunnable . wrap ( command , NORMAL ) ; }
try { channel . sendResponse ( new StringRestResponse ( RestStatus.OK ) ) ; } catch ( Throwable e ) { onFailure ( e ) ; }
@ Override public void setIcon ( Pixmap [] pixmap ) {}
builder . startObject ( name ) . startObject ( type ) ;
return NUMBER_CONSTANT ;
@ Override protected FieldDataType getFieldDataType () { return new FieldDataType ( STRING_CONSTANT , getFieldDataSettings () ) ; }
allInterfaces . add ( intf ) ;
joystick . set ( dx , dy ) . scl ( WorldView.JOYSTICK_DISTANCE_MULTIPLIER ) ;
{ fieldName = smartNameFieldMappers . mapper () . names () . indexName () ; value = smartNameFieldMappers . mapper () . indexedValue ( value ) ; }
HttpServerTransport httpServerTransport = internalCluster () . getDataNodeInstance ( HttpServerTransport . class ) ;
map2 . close () ;
stage = new Stage () ;
shard . refresh ( new Engine.Refresh () . force ( true ) ) ;
final float localY2Cos = localY2 * cos ;
Engine.Searcher searcher = shardToPurge . acquireSearcher () ;
filter = parseContext . cacheFilter ( filter , null ) ;
StreamOutput streamOutput = cachedEntry . bytes ( CompressorFactory . defaultCompressor () ) ;
@ Required public DeleteByQueryRequest querySource ( QueryBuilder queryBuilder ) { return querySource ( queryBuilder . buildAsString () ) ; }
long version = UidField . loadVersion ( context , new org.apache.lucene.index.Term ( UidFieldMapper.NAME , uid . toBytesRef () ) ) ;
{ try { dis . close () ; } catch ( IOException e ) {} raf . decreaseRefCount ( true ) ; return true ; }
( ! ( graphics . supportsExtension ( STRING_CONSTANT ) ) ) || ( ( graphics . isGL20Available () ) == false )
layers . addLayer ( layer ) ;
MapperService.SmartNameObjectMapper mapper = context . smartNameObjectMapper ( nestedPath ) ;
@ Override protected Event register ( Event resource ) { return NewsListAdapter . isValid ( resource ) ? resource : null ; }
{ super . onCreate ( bundle ) ; initialize ( false ) ; getGraphics () . setRenderListener ( new Box2DTestCollection () ) ; }
ordered = new BoundedTreeSet < InternalStringTermsFacet.StringEntry > ( comparatorType . comparator () , ( ( size ) * ( numberOfShards ) ) )
return defaultUser ? new UserReceivedNewsFragment () : new OrganizationNewsFragment () ;
valueScript . setNextReader ( context ) ;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new BulletTestCollection () , config ) ; }
Gdx.gl = graphics . getGLCommon () ;
return bitmapFont . draw ( renderer.spriteBatch , str , x , y , color , start , end ) ;
{ try { channel . sendResponse ( result ) ; } catch ( Throwable e ) { onFailure ( e ) ; } }
try { indexAliasesService . aliasFilter ( STRING_CONSTANT ) ; fail () ; } catch ( InvalidAliasNameException e ) {}
{ FileSystemUtils . deleteRecursively ( dataDirToClean . toArray ( new File [ dataDirToClean . size () ] ) ) ; }
{ return minimumShouldMatch ( ( ( Math . round ( ( percentTermsToMatch * NUMBER_CONSTANT ) ) ) + STRING_CONSTANT ) ) ; }
{ super . dispose () ; if ( ( internalTickCallback ) != null ) internalTickCallback . delete () ; internalTickCallback = null ; }
if ( ! ( uid . next () ) ) { return null ; }
sprite . rotate90 ( true ) ;
return new org.apache.lucene.search.DeletionAwareConstantScoreQuery ( filter ) ;
{ clusterState = Builder . readFrom ( in , nodesProvider . nodes () . localNode () ) ; }
{ sound . play ( NUMBER_CONSTANT ) ; return false ; }
List < Object > values = lookup . source () . extractRawValues ( mapper . names () . sourcePath () ) ;
{ app . debug ( STRING_CONSTANT , STRING_CONSTANT ) ; batch . dispose () ; intro . getTexture () . dispose () ; }
public IndicesExistsRequestBuilder setIndices ( String . . . indices ) { request . setIndices ( indices ) ; return this ; }
HashSet < DiscoveryNode > newNodes = new HashSet <> () ;
Object to
table . setClip ( true ) ;
BytesRef value = parser . utf8BytesOrNull () ;
request . indices ( state . metaData () . concreteIndices ( indicesOrAliases , request . indicesOptions () ) ) ;
( Gdx.gl11 ) != null
for ( StoreFileMetaData file : this ) { totalSizeInBytes += file . length () ; }
pager . setAdapter ( new RepositoryPagerAdapter ( getSupportFragmentManager () , repository . isHasIssues () ) ) ;
this . audio = new IOSAudio ( config.useObjectAL ) ;
boolean cache = false ;
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_filters ) ; }
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( getString ( no_gists ) ) ; ListViewUtils . configure ( getActivity () , getListView () ) ; }
int iter = scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Table table = new Table () ;
configureTabPager () ;
{ up . set ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; direction . set ( NUMBER_CONSTANT , NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) ) ; }
catch ( Throwable e ) { listener . onFailure ( e ) ; return currentState ; }
if ( ( cube.state ) == ( Cube.DEAD ) ) cube = new Cube ( this , bob.bounds.x , bob.bounds.y ) ;
GdxTest test = new TimerTest () ;
{ map . removeStashIndex ( currentIndex ) ; nextIndex = ( currentIndex ) - NUMBER_CONSTANT ; findNextIndex () ; }
GdxTest test = new SoundTouchTest () ;
{ indexRequest . id ( UUID . randomBase64UUID () ) ; indexRequest . opType ( CREATE ) ; }
return new IOSApplication ( new Benchmark3DTest () , config ) ;
{ return line ( start.x , start.y , end.x , end.y ) ; }
app . getGraphics () . setRenderListener ( new com.badlogic.gdx.tests.Box2DTestCollection () ) ;
{ writer = file . writer ( false , STRING_CONSTANT ) ; toJson ( object , knownType , elementType , writer ) ; }
values = idFieldData . load ( context ) . getBytesValues ( true ) ;
ui = new Stage () ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new VeryAngryRobotsGame () , STRING_CONSTANT , DesktopStarter.WINDOW_WIDTH , DesktopStarter.WINDOW_HEIGHT ) ; }
add ( name , region , TextureRegion . class ) ;
{ progress . cancel () ; startActivity ( ViewGistsActivity . createIntent ( gist ) ) ; setResult ( ShareGistActivity.RESULT_CREATED ) ; finish () ; }
if ( ! ( name . equals ( name ) ) ) return false ;
if ( ( shardFailure . index () ) != null ) { builder . field ( STRING_CONSTANT , shardFailure . index () , NONE ) ; }
{ map . removeStashIndex ( currentIndex ) ; nextIndex = currentIndex ; findNextIndex () ; }
TransportSearchDfsQueryAndFetchAction.AsyncAction . this . addShardFailure ( shardIndex , dfsResult . shardTarget () , t ) ;
request . index ( metaData . concreteSingleIndex ( request . index () , request . indicesOptions () ) ) ;
cache = new SpriteCache ( NUMBER_CONSTANT , false ) ;
public Vector3 getCenter ( Vector3 out ) { return cnt ; }
RoutingTable.Builder routingTableBuilder = RoutingTable . builder ( updatedState . routingTable () ) ;
if ( terms == null ) { return GeoPointDoubleArrayAtomicFieldData . empty ( reader . maxDoc () ) ; }
String [] lines = console . getItems () . toArray ( String . class ) ;
GdxTest test = new Basic3DTest () ;
if ( item instanceof GistFile ) startActivity ( ViewGistFilesActivity . createIntent ( gist , ( position - NUMBER_CONSTANT ) ) ) ;
InputStream input = file . readFile () ;
allocation . routingNodes () . assignShardToNode ( shardRouting , routingNode . nodeId () ) ;
StringBuilder errorMessage = new StringBuilder ( STRING_CONSTANT ) . append ( CURRENT ) . append ( STRING_CONSTANT ) ;
int result = chooser . showOpenDialog ( null ) ;
gui = TwlRenderer . createGUI ( layout , STRING_CONSTANT , Internal ) ;
{ return new Dependency ( this , key , allowsNull , parameterIndex ) ; }
( Gdx.gl20 ) != null
{ return Integer . compare ( o1 . order () , o2 . order () ) ; }
assertAcked ( prepareCreate ( STRING_CONSTANT ) . addMapping ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . addMapping ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
new org.elasticsearch.index.settings.IndexSettingsModule ( new Index ( STRING_CONSTANT ) , Builder.EMPTY_SETTINGS )
{ stage . getViewport () . update ( width , height , true ) ; root . invalidate () ; }
ShardDeleteResponse response = new ShardDeleteResponse ( delete . version () , delete . found () ) ;
public void log ( String tag , String message , Exception exception ) ;
{ map . removeStashIndex ( currentIndex ) ; nextIndex = ( currentIndex ) - NUMBER_CONSTANT ; advance () ; }
BufferUtils . copy ( vertices , sourceOffset , count , byteBuffer ) ;
assertThat ( doc . masterDoc () . getFieldable ( STRING_CONSTANT ) . tokenStreamValue () , notNullValue () ) ;
getRequest . realtime ( request . paramAsBooleanOptional ( STRING_CONSTANT , null ) ) ;
{ super . readFrom ( in ) ; if ( in . readBoolean () ) { state = Builder . readFrom ( in ) ; } }
builder . timeValueField ( PercolateStats.Fields.TIME_IN_MILLIS , PercolateStats.Fields.TIME , percolateTimeInMillis ) ;
{ super . onCreate ( savedInstanceState ) ; initialize ( new SuperJumper () ) ; }
return new org.elasticsearch.common.lucene.search.TermFilter ( names () . createIndexNameTerm ( ( nullValue ? BooleanFieldMapper.Values.TRUE : BooleanFieldMapper.Values.FALSE ) ) ) ;
protected void updateRelative ( float percentDelta ) { actor . rotateBy ( ( ( amount ) * percentDelta ) ) ; }
item . index ( clusterState . metaData () . concreteSingleIndex ( item . index () ) ) ;
final NoisyChannelSpellChecker checker = new NoisyChannelSpellChecker ( realWordErrorLikelihood , suggestion . getRequireUnigram () , suggestion . getTokenLimit () ) ;
String name = ( ( this . name ) != null ) ? this . name : getClass () . getName () ;
int numDocs = scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
throw new com.badlogic.gdx.utils.GdxRuntimeException ( ( STRING_CONSTANT + file ) ) ;
new org.elasticsearch.script.ScriptModule ( settings )
stage = new Stage () ;
MetaData.Builder mdBuilder = MetaData . builder ( currentState . metaData () ) ;
version . onOrAfter ( LUCENE_4_8 )
catch ( Throwable e ) { Loggers . getLogger ( MonitorModule . class ) . trace ( STRING_CONSTANT , e ) ; }
builder . addSurface ( spare.surfaceForm . get () , spare.payload . get () , spare.weight ) ;
final long id
builder . startObject ( AggregationBuilder . getName () ) ;
int descriptionColor = view.repoName . getResources () . getColor ( text_description ) ;
Snippet [] fieldSnippets = highlighter . highlightDoc ( highlighterContext.fieldName , mapperHighlighterEntry.filteredQueryTerms , context . searcher () , hitContext . topLevelDocId () , numberOfFragments ) ;
{ new com.badlogic.gdx.backends.jogl.JoglApplication ( new Bouncy () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; }
{ throw new IllegalArgumentException ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; }
filter = ( ( NumberFieldMapper ) ( mapper ) ) . rangeFilter ( parseContext . fieldData () , from , to , includeLower , includeUpper , parseContext )
CombineFunction combineFunction = CombineFunction.MULT ;
{ context . close () ; SearchContext . removeCurrent () ; }
{ switch ( item . getItemId () ) { case id.m_search : onSearchRequested () ; return true ; default: return super . onOptionsItemSelected ( item ) ; } }
project.files . add ( new ProjectFile ( STRING_CONSTANT , false ) ) ;
clusterState . blocks () . hasGlobalBlock ( STATE_NOT_RECOVERED_BLOCK )
scoreFunction = new CustomScoreQueryParser.ScriptScoreFunction ( script , vars , searchScript ) ;
@ Override public AudioDevice newAudioDevice ( boolean isMono ) { return new AndroidAudioDevice ( isMono ) ; }
UidFilter filter = new UidFilter ( types , ids ) ;
time = ( diff < NUMBER_CONSTANT ) ? NUMBER_CONSTANT : duration ;
{ searcher . close () ; }
ui = new Stage ( NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ;
View loginMenu = view ( m_login ) ;
return new FloatValuesComparator ( indexFieldData , dMissingValue , numHits , reversed ) ;
if ( ( fieldsBoosts ) == null ) { fieldsBoosts = new ObjectFloatOpenHashMap () ; }
config.useGL20 = true ;
new com.badlogic.gdx.backends.jglfw.JglfwApplication ( test , config ) ;
boolean transpositions = false ;
return new Field ( names . indexName () , value ) ;
logger . debug ( STRING_CONSTANT , node , pingRetryCount , pingRetryTimeout ) ;
long totalSizeInBytes = merge.estimatedMergeBytes ;
if ( in . readBoolean () ) { suggest = Suggest . readSuggest ( SUGGEST , in ) ; }
texturePackerSettings.duplicatePadding = true ;
return wrapSmartNameFilter ( filter , smartNameFieldMappers , parseContext . indexCache () ) ;
{ validate () ; cache . setPosition ( x , y ) ; cache . draw ( batch , ( ( color.a ) * parentAlpha ) ) ; }
{ LwjglApplicationConfiguration config = new LwjglApplicationConfiguration () ; new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new com.badlogic.gdx.tests.SpriteCacheTest () , config ) ; }
iterateAssertCount ( numShards , indexCounter . get () , NUMBER_CONSTANT ) ;
case id.m_apply :
@ Override protected void configure () { bind ( Engine . class ) . to ( MockInternalEngine . class ) . asEagerSingleton () ; }
blobStore . executor ()
this . filter = new CompressedString ( builder . bytes () ) ;
Version indexVersion = Version . indexCreated ( settings ) ;
intent . putExtra ( EXTRA_COMMENT_BODY , comment ) ;
scrollPane . setOverscroll ( false , false ) ;
ThrowableObjectInputStream ois = new ThrowableObjectInputStream ( buffer , transport . settings () . getClassLoader () ) ;
fieldTotals = new ObjectLongOpenHashMap () ;
final ClusterState nodeSpecificClusterState = ClusterState.Builder . fromBytes ( clusterStateBytes , discovery.localNode ) ;
{ return getBounds ( str , NUMBER_CONSTANT , str . length () , cache . getBounds () ) ; }
{ super . onCreate ( savedInstanceState ) ; initialize ( new Bouncy () , false ) ; }
inputProcessor . touchDragged ( event.x , event.y , event.pointer ) ;
{ parser = XContentFactory . xContent ( JSON ) . createParser ( data ) ; return Builder . fromXContent ( parser ) ; }
if ( handler == null ) { throw new ActionNotFoundTransportException ( action ) ; }
int result = ( ( int ) ( type ) ) ;
jsonTexture.fileName = ( materialDir + STRING_CONSTANT ) + fileName ;
{ final boolean freed = searchService . freeContext ( contextId ) ; actionListener . onResponse ( freed ) ; }
long count = Lucene . count ( searcher , query ) ;
{ Decal.dir . set ( position ) . sub ( this . position ) . nor () ; setRotation ( Decal.dir , up ) ; }
if ( ( childType ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
assertNoFailures ( percolate ) ;
DocIdSet docIdSet = parentDocs . get ( reader . getCoreCacheKey () ) ;
if ( out . getVersion () . before ( V_1_4_0 ) ) { request . index ( shardId . getIndex () ) ; }
new org.elasticsearch.search.internal.ShardSearchRequest ( request ) . types ( request . types () ) . nowInMillis ( request . nowInMillis () ) . filteringAliases ( request . filteringAliases () )
{ String name = cluster () . startNode ( settings ) ; return cluster () . client ( name ) ; }
renderBatch . render ( lights , instances . get ( i ) ) ;
return new IntValuesComparator ( indexFieldData , dMissingValue , numHits , reversed ) ;
new OnCancelListener () { @ Override public void onCancel ( DialogInterface arg0 ) { listener . canceled () ; } }
final TransportService transportService = new TransportService ( new org.elasticsearch.transport.netty.NettyTransport ( settings , threadPool ) , threadPool ) . start () ;
if ( metaData == null ) { logger . debug ( STRING_CONSTANT ) ; return true ; }
hud = new Stage ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ;
if ( ( charBuffer [ i ] ) == NUMBER_CONSTANT ) { len = i ; break; }
ain = AudioSystem . getAudioInputStream ( new BufferedInputStream ( handle . read () ) ) ;
try { shardInjector . getInstance ( org.elasticsearch.index.translog.Translog . class ) . close ( delete ) ; } catch ( Exception e ) {}
if ( item instanceof GistFile ) startActivity ( GistFilesViewActivity . createIntent ( gist , ( position - NUMBER_CONSTANT ) ) ) ;
modelBatch . render ( instance , lights ) ;
cache . tint ( color ) ;
if ( commitPoint . translogFiles () . isEmpty () ) { indexShard . start ( STRING_CONSTANT ) ; return; }
@ Required public IndexDeleteByQueryRequest querySource ( QueryBuilder queryBuilder ) { return querySource ( queryBuilder . buildAsString () ) ; }
ClusterState.Builder builder = ClusterState . builder ( currentState . getClusterName () ) ;
buf = ChannelBuffers . wrappedBuffer ( builder . underlyingBytes () , NUMBER_CONSTANT , builder . underlyingBytesLength () ) ;
HasChildFilter childFilter = HasChildFilter . create ( query , parentType , childType , searchContext , executionType ) ;
Query query = new DeletionAwareConstantScoreQuery ( Queries.MATCH_ALL_FILTER ) ;
Scorer subQueryScorer = subQueryWeight . scorer ( context , scoreDocsInOrder , false , acceptDocs ) ;
public FieldDataType getType () { return fieldData . type () ; }
@ Override public void handleException ( TransportException exp ) { onFailure ( shard , exp ) ; }
deps = new Array < AssetDescriptor > () ;
if ( value == null ) { return null ; }
if ( ( entry . bytes () . bytes () . length () ) > ( CachedStreamOutput.BYTES_LIMIT ) ) { return; }
double factor ( int docId ) ;
int prefixColor = view.repoName . getResources () . getColor ( text_description_selector ) ;
if ( shard != null ) { shard . idCache () . onRemoval ( readerCache . sizeInBytes () ) ; }
indexShard . acquireSearcher ( STRING_CONSTANT )
proc . onValue ( docId , values [ loc ] ) ;
for ( int i = NUMBER_CONSTANT ; i < numElements ; i ++ ) vertices [ i ] = din . readFloat () ;
intsScratch.values [ NUMBER_CONSTANT ] = ordinal ;
{ bind ( MergePolicyProvider . class ) . to ( settings . getAsClass ( STRING_CONSTANT , TieredMergePolicyProvider . class , STRING_CONSTANT , STRING_CONSTANT ) ) . asEagerSingleton () ; }
builder . byteSizeField ( FilterCacheStats.Fields.MEMORY_SIZE_IN_BYTES , FilterCacheStats.Fields.MEMORY_SIZE , memorySize ) ;
{ values [ i ] = indexFieldDatas [ i ] . load ( context ) . getBytesValues ( true ) ; }
AtomicReader reader = SlowCompositeReaderWrapper . wrap ( DirectoryReader . open ( writer , true ) ) ;
final List < CompletionSuggestion.Entry.Option > options = new java.util.ArrayList ( results . values () ) ;
rootObjectMapper . mergeMapping ( this , jsonMergeWith.rootObjectMapper , mergeFlags ) ;
shardGatewayService . snapshot ( STRING_CONSTANT ) ;
config.useGL20 = false ;
MapperService.SmartNameObjectMapper mapper = parseContext . smartObjectMapper ( path ) ;
public RefreshRequestBuilder setWaitForOperations ( boolean waitForOperations ) { request . setWaitForOperations ( waitForOperations ) ; return this ; }
{ data = FSTBytesAtomicFieldData . empty () ; estimator . afterLoad ( null , data . getMemorySizeInBytes () ) ; return data ; }
String [] headers = new String [] { STRING_CONSTANT , STRING_CONSTANT } ;
cnt . set ( min ) . add ( max ) . scl ( NUMBER_CONSTANT ) ;
InternalIndexShard indexShard = ( ( InternalIndexShard ) ( indexService . shardSafe ( request . shardId () ) ) ) ;
if ( ( listener ) != null ) { listener . error ( assetDesc , t ) ; } else { throw new GdxRuntimeException ( t ) ; }
{ ret.bytes = value.bytes ; ret.offset = value.offset ; ret.length = value.length ; }
final ProgressDialog dialog = LightProgressDialog . create ( this , login_activity_authenticating ) ;
{ prefSize ( new Fixed ( width ) , new Fixed ( height ) ) ; return this ; }
renderer . begin ( Rectangle ) ;
reflectiveFactoryFor ( GistViewHolder . class , GistViewHolder . computeMaxDigits ( items ) )
boolean cache = true ;
double score ( int docId , float subQueryScore ) ;
if ( queryString == null ) { return null ; }
setContentView ( pager_with_title ) ;
if ( transport.compress ) { options . withCompress ( true ) ; }
listener . dispose () ;
throw new IllegalStateException ( ( STRING_CONSTANT + result ) ) ;
{ LwjglApplicationConfiguration config = new LwjglApplicationConfiguration () ; new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new com.badlogic.gdx.tests.IntegerBitmapFontTest () , config ) ; }
animation.totalDuration = ( frames.length ) * NUMBER_CONSTANT ;
GdxTest test = new TimerTest () ;
return BufferedImage.TYPE_4BYTE_ABGR_PRE ;
{ LwjglApplicationConfiguration config = new LwjglApplicationConfiguration () ; new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new com.badlogic.gdx.tests.InputTest () , config ) ; }
catch ( Exception e ) { logger . debug ( STRING_CONSTANT , e , stateFile . getAbsolutePath () ) ; }
View root = inflater . inflate ( comment_list_view , null ) ;
bigArrays.ramBytesUsed . addAndGet ( ( - ( ramBytesUsed () ) ) ) ;
( ( IOSInput ) ( Gdx.input ) ) . processEvents () ;
( centerY - ( ( texture . getHeight () ) / NUMBER_CONSTANT ) )
Intent intent = FiltersViewActivity . createIntent () ;
if ( hasDocValues () ) { addDocValue ( context , value ) ; }
internalCluster () . ensureAtLeastNumDataNodes ( ( NUMBER_CONSTANT + replica ) ) ;
keyCode == ( Keys.COMMA )
tokenizer . hasMoreTokens ()
{ return new Vector3 ( origin ) . add ( direction . tmp () . scl ( distance ) ) ; }
assertAcked ( prepareCreate ( STRING_CONSTANT ) . setSettings ( ImmutableSettings . builder () . put ( STRING_CONSTANT , numShards ) . put ( STRING_CONSTANT , numReplicas ) . build () ) )
TermVectorResponse response = request . get () ;
public StoreStats stats ( ) throws IOException { return new StoreStats ( Directories . estimateSize ( directory ) , directoryService . throttleTimeInNanos () ) ; }
setTitle ( dashboard_issues_title ) ;
for ( ShardSearchFailure failure : failures ) { logger . error ( STRING_CONSTANT , failure . reason () , failure . toString () ) ; }
builder . startObject ( nodeInfo . node () . id () , NONE ) ;
new JsonHttpResponse ( request , BAD_REQUEST , JsonBuilder . jsonBuilder () . startObject () . field ( STRING_CONSTANT , e . getMessage () ) . endObject () )
float boost = this . boost ;
shader = new ShaderProgram ( graphics . getGL20 () , vertexShader , fragmentShader , true ) ;
client . prepareSearch () . setQuery ( QueryBuilders . idsQuery ( STRING_CONSTANT ) . ids ( Integer . toString ( i ) ) ) . execute () . actionGet ()
RoutingTable.Builder routingTableBuilder = RoutingTable . builder ( currentState . routingTable () ) ;
maxMergeAtOnceExplicit != ( TieredMergePolicyProvider . this . maxMergeAtOnceExplicit )
model = new Model ( loader . parseModel ( files . internal ( STRING_CONSTANT ) ) ) ;
String [] lines = console . getItems () . toArray () ;
hud = new Stage () ;
smartNameFieldMappers . explicitTypeInNameWithDocMapper ()
if ( currentMapper . useFieldQueryWithQueryString () ) { query = currentMapper . fieldQuery ( queryText , parseContext ) ; }
{ return clusterState . routingTable () . allActiveShardsGrouped ( concreteIndices , true ) ; }
currTexture = ( hwMipMap . isChecked () ) ? textureHW : textureSW ;
if ( ( dateDetection ) != ( RootObjectMapper.Defaults.DATE_DETECTION ) ) { builder . field ( STRING_CONSTANT , dateDetection ) ; }
new com.badlogic.gdx.backends.jogl.JoglApplication ( new com.badlogic.gdx.tests.InputTest () , config ) ;
return super . list () ;
float c = ( Intersector.start . dst2 ( center ) ) - ( radius * radius ) ;
processor . touchMoved ( e.x , e.y ) ;
builder . field ( STRING_CONSTANT , indexMetaData . state () . toString () . toLowerCase ( ENGLISH ) ) ;
return new IOSApplication ( new DownloadTest () , config ) ;
if ( ( initialPosition ) < ( adapter . getCount () ) ) { pager . scheduleSetItem ( initialPosition ) ; onPageSelected ( initialPosition ) ; }
GdxTest test = new UITest () ;
position . set ( camPos . scl ( NUMBER_CONSTANT ) ) ;
{ return ( ( getTopHeight () ) + ( getBottomHeight () ) ) + ( patches [ NinePatch.MIDDLE_CENTER ] . getRegionHeight () ) ; }
{ clusterService . remove ( this ) ; listener . onFailure ( new org.elasticsearch.node.NodeClosedException ( clusterService . localNode () ) ) ; }
posRights = bigArrays . resize ( posRights , tops . size () ) ;
final Throwable e
ArrayList < FieldMapper > list = new ArrayList ( fieldMappers.length ) ;
logoSprite . flip ( false , true ) ;
if ( ( STRING_CONSTANT . equals ( feature ) ) && ( ( ElasticsearchIntegrationTest . cluster () . numBenchNodes () ) > NUMBER_CONSTANT ) ) { continue; }
root . draw ( batch , NUMBER_CONSTANT ) ;
XContentBuilder builder = restContentBuilder ( request , false ) ;
net = new AndroidNet ( this ) ;
{ switch ( item . getItemId () ) { case id.m_refresh : forceRefresh () ; return true ; default: return super . onOptionsItemSelected ( item ) ; } }
return lhs . getName () . compareToIgnoreCase ( rhs . getName () ) ;
Xml.Element child = this . children . get ( i ) ;
List < Repository > repos = cache . getRepos ( org , isForceRefresh ( args ) ) ;
Engine.Searcher searcher = indexShard . acquireSearcher () ;
if ( ( config.getTouchEventsForLiveWallpaper ) && ( ( Integer . parseInt ( SDK ) ) < NUMBER_CONSTANT ) ) linkedEngine . setTouchEventsEnabled ( true ) ;
i < NUMBER_CONSTANT
viewport . update ( screenWidth , screenHeight , true ) ;
request . index ( state . metaData () . concreteSingleIndex ( request . index () ) ) ;
state . blocks () . hasGlobalBlock ( discoveryService . getNoMasterBlock () )
JsonBuilder builder = binaryJsonBuilder () . prettyPrint () . startObject () . field ( STRING_CONSTANT , detailedMessage ( t ) ) ;
{ return getForField ( mapper . names () , mapper . fieldDataType () ) ; }
int sdkVersion = Integer . parseInt ( SDK ) ;
@ Override public void consumeCompressedData ( int target ) {}
createIndexBasedOnFieldSettings ( STRING_CONSTANT , STRING_CONSTANT , testFieldSettings ) ;
mesh = ModelLoader . loadObj ( files . internal ( STRING_CONSTANT ) . read () ) ;
return new Vector2 ( target.collisionCenter ) . sub ( relativeVel . scl ( Math . max ( NUMBER_CONSTANT , time_to_target ) ) ) ;
ClusterState clusterState = ClusterState . builder ( org.elasticsearch.cluster.ClusterName.DEFAULT ) . nodes ( nodes ) . metaData ( metaData ) . routingTable ( routingTable ) . build () ;
assertThat ( response . getStatus () , equalTo ( CREATED ) ) ;
byte [] heightMap = PerlinNoiseGenerator . generateHeightMap ( voxelWorld.voxelsX , voxelWorld.voxelsZ , min , max , octaveCount ) ;
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_repositories ) ; }
if ( ( repo ) instanceof Serializable ) args . putSerializable ( BranchFileViewActivity.ARG_REPO , repo ) ;
disMaxQuery () . boost ( NUMBER_CONSTANT ) . tieBreaker ( NUMBER_CONSTANT ) . add ( termQuery ( STRING_CONSTANT , NUMBER_CONSTANT ) ) . add ( termQuery ( STRING_CONSTANT , NUMBER_CONSTANT ) )
List < FieldMapper > fieldMappers
IndexService indexService = indicesService . indexServiceSafe ( shardId . getIndex () ) ;
this . mappingSource = new CompressedString ( builder . underlyingBytes () , NUMBER_CONSTANT , builder . underlyingBytesLength () ) ;
Actor actor = stage . hit ( stageCoords.x , stageCoords.y , true ) ;
Store store = new org.elasticsearch.index.store.memory.ByteBufferStore ( shardId , settings , null , new org.elasticsearch.cache.memory.ByteBufferCache ( settings ) ) ;
{ set . removeStashIndex ( currentIndex ) ; nextIndex = ( currentIndex ) - NUMBER_CONSTANT ; findNextIndex () ; }
final RecoveryStatus recoveryStatus = new RecoveryStatus ( request . recoveryId () , indexShard , request . sourceNode () ) ;
public void freeCell ( Cell cell ) { cell . setLayout ( null ) ; TableToolkit.cellPool . free ( cell ) ; }
{ return clusterState . routingTable () . activePrimaryShardsGrouped ( concreteIndices , true ) ; }
private String getAvatarFilenameForUrl ( String avatarUrl ) { return Base64 . encodeToString ( avatarUrl . getBytes () , NO_WRAP ) ; }
result . exists ()
assertThat ( searchResponse . isTimedOut () , equalTo ( true ) ) ;
Actor over = hit ( stageCoords.x , stageCoords.y , true ) ;
{ channel . sendResponse ( new AbstractSimpleTransportTests.StringMessage ( ( STRING_CONSTANT + ( request.message ) ) ) , TransportResponseOptions . options () . withCompress ( true ) ) ; }
if ( smartNameFieldMappers != null ) { if ( smartNameFieldMappers . hasMapper () ) { query = smartNameFieldMappers . mapper () . fieldQuery ( value ) ; } }
bind ( MetaDataIndexStateService . class ) . asEagerSingleton () ;
reflectiveFactoryFor ( GistViewHolder . class , idWidth , avatarHelper )
processor . mouseMoved ( e.x , e.y ) ;
classifyVertex ( ( earTipIndex == ( vertexCount ) ? NUMBER_CONSTANT : earTipIndex ) ) ;
if ( ( renderable.worldTransform . det3x3 () ) == NUMBER_CONSTANT ) return;
logger . info ( STRING_CONSTANT , ( ( Object ) ( nodesIds ) ) ) ;
if ( randomBoolean () ) { percolateRequestBuilder . setScore ( true ) ; } else { percolateRequestBuilder . setSortByScore ( true ) . setSize ( numQueries ) ; }
int index = Math . abs ( counter . getAndIncrement () ) ;
{ for ( ByteBuffer buffer : buffers ) { dir.byteBufferCache . releaseBuffer ( buffer ) ; } buffers = null ; }
gl . glClear ( GL_COLOR_BUFFER_BIT ) ;
@ Override public void consumeCompressedData () {}
int size = buffer . capacity () ;
case id.m_delete :
prefHeight = ( bounds.height ) - ( style.font . getDescent () ) ;
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( getString ( no_issues ) ) ; ListViewUtils . configure ( getActivity () , getListView () ) ; }
Query query = new org.apache.lucene.search.DeletionAwareConstantScoreQuery ( filter ) ;
{ map . removeStashIndex ( currentIndex ) ; nextIndex = currentIndex ; advance () ; }
MultiTermQuery.RewriteMethod method = QueryParsers . parseRewriteMethod ( rewriteMethod , null ) ;
{ TypeParsers . parseMultiField ( builder , name , parserContext , propName , propNode ) ; }
Query childrenConstantScoreQuery = new org.elasticsearch.index.search.child.ChildrenConstantScoreQuery ( query , parentType , childType , parentFilter , shortCircuitParentDocSet ) ;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new DownloadTest () , config ) ; }
public void setTapSquareSize ( float tapSquareSize ) { this . tapSquareSize = tapSquareSize ; }
int result = super . hashCode () ;
cache . setColors ( BLUE , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
renderer . render ( world , camera.combined ) ;
arrayPool . freeAll ( usedArrays ) ;
final PageCacheRecycler recycler = ( randomBoolean () ) ? null : new org.elasticsearch.test.cache.recycler.MockPageCacheRecycler ( ImmutableSettings.EMPTY , new ThreadPool ( STRING_CONSTANT ) ) ;
BucketPriorityQueue ordered = new BucketPriorityQueue ( size , order . comparator ( null ) ) ;
assertThat ( nodesMap . size () , equalTo ( immutableCluster () . size () ) ) ;
return wrapSmartNameQuery ( query , smartNameFieldMappers , parseContext . indexCache () ) ;
new NativeCodeGenerator () . generate () ;
builder . timeValueField ( WarmerStats.Fields.TOTAL_TIME_IN_MILLIS , WarmerStats.Fields.TOTAL_TIME , totalTimeInMillis ) ;
this . audio = new IOSAudio ( config ) ;
return docSet == ( DocSet.EMPTY_DOC_SET ) ? null : docSet ;
if ( requestCode == ( RequestCodes.COMMIT_VIEW ) ) { notifyDataSetChanged () ; return; }
{ service . abortBenchmark ( request . benchmarkNames () , listener ) ; }
( this . params ) == null
public boolean handle ( Event event ) ;
j ++
startActivity ( FilterBrowseActivity . createIntent () ) ;
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( getString ( no_repositories ) ) ; ListViewUtils . configure ( getActivity () , getListView () ) ; }
request . index ( clusterState . metaData () . concreteSingleIndex ( request . index () ) ) ;
try { return indexQueryParser . parseInnerFilter ( parser ) . filter () ; } finally { parser . close () ; }
jsonTexture.fileName = ( materialDir + ( materialDir . endsWith ( STRING_CONSTANT ) ? STRING_CONSTANT : STRING_CONSTANT ) ) + fileName ;
ui . draw () ;
builder . timeValueField ( RefreshStats.Fields.TOTAL_TIME_IN_MILLIS , RefreshStats.Fields.TOTAL_TIME , totalTimeInMillis ) ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Bouncy () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
final ClusterState nodeSpecificClusterState = ClusterState.Builder . fromBytes ( clusterStateBytes , discovery.localNode , clusterName ) ;
GdxTest test = new Box2DTestCollection () ;
builder . startObject ( nodeStats . node () . id () , NONE ) ;
Actor hit = actor . hit ( x , y , true ) ;
Array < AssetDescriptor > dependencies = new Array () ;
loadedSettings = settingsLoader . load ( Streams . copyToString ( new InputStreamReader ( is , STRING_CONSTANT ) ) )
searchContext . addRewrite ( parentFilter ) ;
{ if ( smartNameFieldMappers . hasMapper () ) { query = smartNameFieldMappers . mapper () . rangeQuery ( from , to , includeLower , includeUpper , parseContext ) ; } }
SnapshotArray < Actor > children = getChildren () ;
Throwable e
query = new org.elasticsearch.index.search.child.ChildrenConstantScoreQuery ( innerQuery , parentType , childType , parentFilter , shortCircuitParentDocSet ) ;
GdxTest test = new IssueTest () ;
{ channel . sendResponse ( new StringRestResponse ( INTERNAL_SERVER_ERROR ) ) ; }
return new IOSApplication ( new InputTest () , config ) ;
routingNode . add ( shardRouting ) ;
{ builder . put ( shardId , new SnapshotMetaData.ShardSnapshotStatus ( null , State.FAILED , STRING_CONSTANT ) ) ; }
total () . toXContent ( builder , params ) ;
datagramPacket . setData ( builder . bytes () . toBytes () ) ;
{ script . setNextReader ( context ) ; }
if ( provider == null ) { throw new ElasticSearchIllegalArgumentException ( ( ( STRING_CONSTANT + name ) + STRING_CONSTANT ) ) ; }
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_issues ) ; }
if ( pos >= NUMBER_CONSTANT ) { throw new ElasticsearchParseException ( STRING_CONSTANT ) ; }
if ( snapshot.phase3 ) { indexShard . refresh ( new Engine.Refresh ( true ) ) ; }
return new BroadcastPingResponse ( shardsResponses . length () , successfulShards , failedShards , shardFailures ) ;
if ( cache ) { filter = parseContext . cacheFilter ( filter ) ; }
add = - ( MathUtils.PI ) ;
( ( ( STRING_CONSTANT + fieldNamesToHighlight ) + STRING_CONSTANT ) + ( hitContext . hit () . type () ) ) + STRING_CONSTANT
if ( retryCount >= ( pingRetryCount ) ) { logger . debug ( STRING_CONSTANT , masterNode , pingRetryCount , pingRetryTimeout ) ; notifyMasterFailure ( sentToNode ) ; }
indexShard . refresh ( new Engine.Refresh () . force ( true ) ) ;
new org.elasticsearch.index.settings.IndexSettingsModule ( index , EMPTY_SETTINGS )
if ( request . paramAsBoolean ( STRING_CONSTANT , false ) ) { builder . prettyPrint () . lfAtEnd () ; }
vel . sub ( pos ) . nor () . scl ( Rocket.VELOCITY ) ;
{ com.github.mobile.android.util.ErrorHelper . show ( getContext () . getApplicationContext () , e , string.error_gist_load ) ; }
for ( SearchHit hit : result . getHits () ) { assertFalse ( Float . isNaN ( hit . getScore () ) ) ; }
debugRenderer . render ( world , camera.combined ) ;
return builder . bytes () . toBytes () ;
FlickScrollPane scroll = new FlickScrollPane ( table ) ;
if ( delete ) { FileSystemUtils . deleteRecursively ( nodeEnv . indexLocations ( new Index ( index ) ) ) ; }
BytesRef type = parser . utf8Bytes () ;
NinePatch patch = skin . getPatch ( STRING_CONSTANT ) ;
builder . rawField ( STRING_CONSTANT , XContentFactory . contentBuilder ( type ) . startObject () . field ( STRING_CONSTANT , STRING_CONSTANT ) . endObject () . copiedBytes () ) ;
builder . field ( STRING_CONSTANT , NAME ) ;
NumericUtils . intToPrefixCoded ( intValue , NUMBER_CONSTANT , bytesRef ) ;
{ if ( c != null ) try { c . close () ; } catch ( Exception e ) {} }
ShardRouting shardRouting = shardIterator . nextOrNull () ;
stage = new Stage ( NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ;
loadingView = inflater . inflate ( loading_item , null ) ;
int i = commonWords , s = bits.length
Keyframe keyframe = anim.keyframes [ ( ( int ) ( time ) ) ] ;
if ( ! ( UIUtils . ctrl () ) ) selected . clear () ;
int currentNumberOfOperations = translog . estimatedNumberOfOperations () ;
transportServiceAdapter . received ( ( size + NUMBER_CONSTANT ) ) ;
{ return ViewUtils . setGone ( new View ( TabPagerActivity . getApplication () ) , true ) ; }
Element properties = tileElement . getChildByName ( STRING_CONSTANT ) ;
source = documentMapper . sourceMapper () . nativeValue ( sourceField ) ;
Version . indexCreated ( indexSettings ) . onOrAfter ( V_1_4_0_Beta1 )
out . scl ( scale ) ;
if ( ( summary . length () ) > NUMBER_CONSTANT ) { logger . info ( STRING_CONSTANT , summary , source ) ; }
{ for ( RenderListener listener : listeners ) listener . surfaceCreated () ; setVerticalSynch ( true ) ; }
out . writeInt ( facets . size () ) ;
final ObjectIntOpenHashMap < String > allocs = new ObjectIntOpenHashMap () ;
String script = Streams . copyToString ( new InputStreamReader ( new FileInputStream ( file ) , Streams.UTF8 ) ) ;
{ super . dispose () ; importer . deleteAllData () ; importer . delete () ; importer = null ; }
map . setOwnedResources ( textures . values () . toArray () ) ;
if ( ranges . isEmpty () ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
while ( ( cluster () . size () ) != NUMBER_CONSTANT ) { cluster () . stopRandomNode () ; }
if ( activity == null ) throw new IllegalArgumentException ( STRING_CONSTANT ) ;
settingsBuilder () . put ( STRING_CONSTANT , ( ( cluster () . size () ) + NUMBER_CONSTANT ) ) . put ( STRING_CONSTANT , NUMBER_CONSTANT )
out . writeStringArrayNullable ( indices ) ;
buffer . put ( indices , offset , count ) ;
indexShard . performRecoveryFinalization ( true ) ;
terms ( STRING_CONSTANT ) . order ( Order . term ( true ) )
BytesStreamInput siBytes = new BytesStreamInput ( source , offset , length , false ) ;
i < ( app.executedRunnables.size )
final long t = TimeUtils . nanoTime () ;
{ return new ShardFlushRequest ( shard . shardId () , request ) ; }
{ SearchContext . current () . close () ; SearchContext . removeCurrent () ; }
TextureAttribute . createDiffuse ( null )
body = new IssueBodyViewHolder ( imageGetter , view ) ;
setScreen ( new GameScreen ( this ) ) ;
( long ) ( Double . parseDouble ( sValue . substring ( NUMBER_CONSTANT , ( ( sValue . length () ) - NUMBER_CONSTANT ) ) ) )
return wrapSmartNameQuery ( query , smartNameFieldMappers , parseContext ) ;
{ notifyDataSetChanged () ; forceRefresh () ; return; }
if ( ThreadLocals.logger . isTraceEnabled () ) { ThreadLocals.logger . trace ( STRING_CONSTANT , args ) ; }
applyTransform ( batch , computeTransform () ) ;
if ( terms == null ) { return loader . buildSingleValue ( field , ordinals . get ( NUMBER_CONSTANT ) ) ; }
ui = new Stage ( NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ;
{ return new NoneRecycler.NV ( c . newInstance ( sizing ) ) ; }
final int position
Distance precision = Distance . parseDistance ( pinFieldData . get ( STRING_CONSTANT ) . toString () ) ;
return c2Type . isAssignableFrom ( c1Type ) ;
BytesStreamInput inStream = new BytesStreamInput ( outStream . copiedByteArray () , false ) ;
if ( getResponse . exists () ) { listener . onFailure ( new ElasticSearchException ( STRING_CONSTANT ) ) ; return; }
{ setupGL ( gl ) ; if ( ( listener ) != null ) listener . surfaceCreated ( app ) ; }
{ query . add ( new org.apache.lucene.search.BooleanClause ( mapper . fieldQuery ( value , parseContext ) , Occur.SHOULD ) ) ; }
{ return inflater . inflate ( gist_file_view , null ) ; }
clusterState = Builder . readFrom ( in , null ) ;
if ( stage != null ) stage . cancelTouchFocusExcept ( flickScrollListener , this ) ;
View root = inflater . inflate ( comment_list , null ) ;
touchEventPool . freeAll ( touchEvents ) ;
setScreen ( new MainMenuScreen ( this ) ) ;
if ( ! ( AccountConstants.ACCOUNT_TYPE . equals ( authTokenType ) ) ) return bundle ;
rootObject ( STRING_CONSTANT ) . add ( object ( STRING_CONSTANT ) . add ( stringField ( STRING_CONSTANT ) . store ( YES ) . index ( Field.Index.NO ) ) )
try { DateFieldMapper . parseLocale ( STRING_CONSTANT ) ; fail () ; } catch ( ElasticsearchIllegalArgumentException ex ) {}
byte [] data = bos . bytes () . toBytes () ;
{ cacheEntry.docId = docId ; cacheEntry.position = NUMBER_CONSTANT ; }
if ( getResponse . isSourceEmpty () ) { return; }
aggregated . close () ;
final int iters = scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
nodesFD . updateNodes ( buildNodesForA ( true ) , ( - NUMBER_CONSTANT ) ) ;
getRequest . realtime ( restRequest . paramAsBoolean ( STRING_CONSTANT , null ) ) ;
if ( arrayType == null ) { return ArgumentType.ObjectArray ; }
startActivity ( ViewGistActivity . createIntent ( gist ) ) ;
vel . sub ( pos ) . nor () . mul ( Rocket.VELOCITY ) ;
String nodeId = UUID . randomBase64UUID () ;
return new Tuple ( scriptName , ext ) ;
catch ( Exception e ) { throw new QueryPhaseExecutionException ( searchContext , STRING_CONSTANT , e ) ; }
HandlesStreamInput in = new HandlesStreamInput ( new org.elasticsearch.common.io.stream.BytesStreamInput ( bytesOut . bytes () . toBytes () , false ) ) ;
Intent intent = ViewGistsActivity . createIntent ( gist ) ;
return HttpResponseStatus.UNAUTHORIZED ;
{ forceReload () ; return; }
channel . sendResponse ( new XContentRestResponse ( request , RestStatus.OK , builder ) ) ;
if ( query == null ) { query = Queries . newMatchNoDocsQuery () ; }
{ if ( ! ( TableToolkit.drawDebug ) ) return; Table . drawDebug ( stage . getActors () , stage . getBatch () ) ; }
new HierarchyCircuitBreakerService ( ImmutableSettings . builder () . put ( REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING , size ) . build () , new org.elasticsearch.node.settings.NodeSettingsService ( ImmutableSettings.EMPTY ) )
case id.m_edit :
ClusterHealthResponse clusterHealth = client1 . admin () . cluster () . health ( clusterHealthRequest () . waitForGreenStatus () ) . actionGet () ;
return queryBuilder . buildAsString () ;
JsonBuilder generator = RestJsonBuilder . restJsonBuilder ( request ) ;
versionedMap = new ConcurrentVersionedMapLong () ;
if ( destroy ) { app.listener . dispose () ; destroy = false ; }
return Queries . wrap ( query , parseContext ) ;
catch ( Exception e ) { ThreadLocals.logger . debug ( STRING_CONSTANT , e ) ; }
logger . warn ( STRING_CONSTANT , failure , reason ) ;
startActivityForResult ( IssuesViewActivity . createIntent ( created , repository ) , RequestCodes.ISSUE_VIEW ) ;
if ( ( smartMapper . fieldMappers () . mapper () ) != null ) { return smartMapper . fieldMappers () . mapper () . names () . indexName () ; }
final Issue issue
@ Override public void operationComplete ( ChannelFuture future ) throws Exception { releasable . close () ; }
@ Override public void consumeCustomData ( int target ) {}
assigneeTask . edit ( AssigneeDialogFragment . getSelected ( arguments ) ) ;
assertThat ( Lucene . count ( searcher , new DeletionAwareConstantScoreQuery ( cachedFilter ) , ( - NUMBER_CONSTANT ) ) , equalTo ( NUMBER_CONSTANT ) ) ;
cache . draw ( batch , parentAlpha ) ;
IndexMetaData.Builder indexBuilder = IndexMetaData . builder ( indexMetaData ) . putCustom ( TYPE , warmers ) ;
{ values [ i ] . clear () ; }
@ Override public void consumeCompressedData ( int target ) {}
return new JoglFileHandle ( file , type ) ;
TermContext termContext = TermContext . build ( indexReaderContext , terms [ i ] ) ;
RandomAccessFile raf ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Cubocy () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; app . setLogLevel ( LOG_DEBUG ) ; }
String propName = entry . getKey () ;
metaData . transientSettings () . getAsMap () . size ()
{ return new org.apache.lucene.search.DeletionAwareConstantScoreQuery ( context . cacheFilter ( fieldFilter ( value ) , null ) ) ; }
multiGetRequest . realtime ( request . paramAsBooleanOptional ( STRING_CONSTANT , null ) ) ;
root . add ( new com.badlogic.gdx.scenes.scene2d.ui.FlickScrollPane ( list ) ) . expandY () . fillY ()
HttpURLConnection . setFollowRedirects ( httpRequest . getFollowRedirects () ) ;
new com.badlogic.gdx.backends.jogl.JoglApplication ( new com.badlogic.gdx.tests.UITest () , config ) ;
( isDisabled ) && ( ( style.disabledFontColor ) != null )
GdxTest test = new TideMapDirectLoaderTest () ;
pager . setAdapter ( new GistQueriesPagerAdapter ( getResources () , getSupportFragmentManager () ) ) ;
catch ( Exception e ) { logger . trace ( STRING_CONSTANT , e , id , inf ) ; lastException = e ; }
BytesStreamOutput out = CachedStreamOutput . popEntry () . bytes () ;
catch ( Exception e ) {}
new MetaDataCreateIndexService.Request ( Origin.API , cause , request . index () ) . settings ( request . settings () ) . mappings ( request . mappings () )
RecoveryAction recoveryAction = indexService . shardInjectorSafe ( shardId ) . getInstance ( RecoveryAction . class ) ;
recoveryStatus . index () . startTime ( System . currentTimeMillis () ) ;
texture = new Texture ( files . internal ( STRING_CONSTANT ) , true ) ;
listener . onFailure ( e ) ;
catch ( Throwable e ) { listener . onFailure ( e ) ; }
return new TerminationHandle () { @ Override public void awaitTermination ( ) throws InterruptedException { latch . await () ; } } ;
dynamicsWorld . rayTest ( rayFrom , rayTo , rayTestCB ) ;
HashSet < DiscoveryNode > newNodes = new HashSet < DiscoveryNode > ( listedNodes ) ;
{ return new NodeHotThreads ( clusterService . localNode () , hotThreads . detect () ) ; }
internalCluster ()
{ toJson ( builder , params , EMPTY_ARRAY ) ; }
{ routingTableDirty = true ; threadPool . cached () . execute ( new RoutingService.RoutingTableUpdater () ) ; }
StringFieldMapper.ValueAndBoost valueAndBoost = StringFieldMapper . parseCreateFieldForString ( context , nullValue , boost ) ;
protected void createIndex () { wipeIndices ( getConcreteIndexName () ) ; createIndex ( getConcreteIndexName () ) ; }
startActivityForResult ( EditIssuesFilterActivity . createIntent ( filter ) , RequestCodes.ISSUE_FILTER_EDIT ) ;
creatorAvatar = ( ( ImageView ) ( headerView . findViewById ( iv_avatar ) ) ) ;
vertices [ ( idx ++ ) ] = v ;
searchContext . addRewrite ( childFilter ) ;
final String id = getIntent () . getStringExtra ( ViewGistActivity.GIST_ID ) ;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new MyGdxGame () , config ) ; }
ExecutableScript executable = scriptService . executable ( STRING_CONSTANT , STRING_CONSTANT , INLINE , null ) ;
if ( valueFieldMapper == null ) { throw new FacetPhaseExecutionException ( facetName , ( ( STRING_CONSTANT + valueField ) + STRING_CONSTANT ) ) ; }
app . getGraphics () . setRenderListener ( new com.badlogic.gdx.tests.VertexBufferObjectClassTest () ) ;
keycode == ( Keys.SPACE )
Filter filter = lookup . getFieldMapper () . termsFilter ( values , lookup . getQueryParseContext () ) ;
lastOperationRead = TranslogStreams . readTranslogOperation ( new BytesStreamInput ( cacheBuffer . array () , NUMBER_CONSTANT , opSize , true ) ) ;
public Map < String , Facet > getFacets () { return facetsAsMap () ; }
@ Override public DocIdSetIterator iterator ( ) throws IOException { return weight . scorer ( leaf , null ) ; }
{ index . writeTo ( out ) ; out . writeVInt ( shardId ) ; }
assert request . versionType () . validateVersionForWrites ( request . version () ) ;
@ Override public String executor () { if ( request . listenerThreaded () ) { return Names.LISTENER ; } return Names.SAME ; }
{ rootObjectMapper . toJson ( builder , params , allFieldMapper , sourceFieldMapper ) ; }
out . writeVLong ( DfsSearchResult . plusOne ( stats . totalTermFreq () ) ) ;
Slider slider = new Slider ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , false , skin ) ;
{ builder . dateTimeFormatter ( TypeParsers . parseDateTimeFormatter ( propNode ) ) ; }
if ( ! ( getResponse . isExists () ) ) { System.err . println ( ( STRING_CONSTANT + id ) ) ; }
indexShard . start ( STRING_CONSTANT ) ;
( ( ( ( STRING_CONSTANT + ( testSection . getName () ) ) + STRING_CONSTANT ) + ( restTestSuite . getPath () ) ) + STRING_CONSTANT )
IndexTemplateMetaData template = Builder . fromXContent ( parser ) ;
if ( rendering ) spriteBatch . flush () ;
assertThat ( routingTable . index ( STRING_CONSTANT ) . shard ( NUMBER_CONSTANT ) . replicaShards () . get ( NUMBER_CONSTANT ) . currentNodeId () , equalTo ( STRING_CONSTANT ) ) ;
runOnEDT = config.forceExit ;
client () . prepareUpdate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . setInlineScript ( STRING_CONSTANT ) . setTimeout ( timeout ) . execute () . actionGet () ;
stage . getViewport () . update ( width , height , true ) ;
String scaledPackFileName = rootSettings . getScaledPackFileName ( packFileName , i ) ;
GdxTest test = new InputTest () ;
public MoreLikeThisFieldJsonQueryBuilder boostTerms ( Boolean boostTerms ) { this . boostTerms = boostTerms ; return this ; }
( ( btRigidBody ) ( entity.body ) ) . applyCentralImpulse ( ray.direction . mul ( impulse ) ) ;
Engine.Searcher engineSearcher = ( searcher == null ) ? indexShard . acquireSearcher ( STRING_CONSTANT ) : searcher ;
{ ui . setSize ( width , height ) ; ui . invalidate () ; stage . getViewport () . update ( width , height , true ) ; }
GdxTest test = new DownloadTest () ;
{ app . debug ( STRING_CONSTANT , STRING_CONSTANT ) ; batch . dispose () ; title . getTexture () . dispose () ; }
if ( ! ( fieldType () . stored () ) ) { return null ; }
return wrapSmartNameFilter ( prefixFilter , smartNameFieldMappers , parseContext . indexCache () ) ;
Thread [] writers = new Thread [ scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ] ;
j ++
builder . field ( STRING_CONSTANT , nodeStats . node () . name () , NONE ) ;
String value = property . getAttribute ( STRING_CONSTANT , null ) ;
pager . setAdapter ( new IssueDashboardPagerAdapter ( getResources () , getSupportFragmentManager () ) ) ;
{ entry = new InternalFullHistogramFacet.FullEntry ( bucket , NUMBER_CONSTANT , Double.POSITIVE_INFINITY , Double.NEGATIVE_INFINITY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; entries . put ( bucket , entry ) ; }
( ( center.y ) + ( ( axis.y ) * radius ) )
FrameBuffer.defaultFramebufferHandle = intbuf . get ( NUMBER_CONSTANT ) ;
StreamInput streamIn = ChannelBufferStreamInputFactory . create ( buffer , size ) ;
Store store = new org.elasticsearch.index.store.ram.RamStore ( shardId , settings , null ) ;
if ( id . startsWith ( STRING_CONSTANT ) ) { logger . trace ( STRING_CONSTANT , id ) ; return seq ; }
nodesFD . updateNodesAndPing ( clusterState ) ;
super . externalNodeSettings ( nodeOrdinal )
if ( arrayType == null ) { throw new RuntimeException ( ( STRING_CONSTANT + type ) ) ; }
Array < Preloader.Asset > assets = new Array < Preloader.Asset > ( lines.length ) ;
JsonBuilder builder = RestJsonBuilder . restJsonBuilder ( request ) ;
catch ( Exception e ) { logger . warn ( STRING_CONSTANT , e , request.index , templatesFile . getAbsolutePath () ) ; }
deleteResponse = new DeleteResponse ( deleteRequest . index () , deleteRequest . type () , deleteRequest . id () , delete . version () , delete . found () )
Blob blob = cloudBlobStore . sync () . newBlob ( buildBlobPath ( blobName ) ) ;
internalCluster () . wipeIndices ( STRING_CONSTANT ) ;
if ( terms == null ) { return PackedArrayAtomicFieldData . empty ( reader . maxDoc () ) ; }
int total = Math . min ( available , count ) ;
public boolean handle ( T event ) { ( current ) ++ ; return ( current ) > ( count ) ; }
audio = new OpenALAudio ( config.audioDeviceBufferCount , config.audioDeviceBufferSize ) ;
if ( ( size ) >= NUMBER_CONSTANT ) { builder . field ( STRING_CONSTANT , size ) ; }
threadPool . executor ( REFRESH )
Texture . setEnforcePotImages ( false ) ;
return new IOSApplication ( new Box2DTestCollection () , config ) ;
{ channel . sendResponse ( new XContentThrowableRestResponse ( request , e ) ) ; }
catch ( Throwable e ) { listener . onFailure ( new ReduceSearchPhaseException ( STRING_CONSTANT , STRING_CONSTANT , e , buildShardFailures () ) ) ; }
frustum . update ( invProjectionView ) ;
assertThat ( clusterStateResponse . getState () . nodes () . nodes () . size () , is ( cluster () . size () ) ) ;
if ( tuple . v1 () . getAsBoolean ( STRING_CONSTANT , false ) ) { Natives . tryMlockall () ; }
{ return search ( compile ( lang , script ) , new SearchLookup ( mapperService , fieldDataCache , null ) , vars ) ; }
{ JoglApplicationConfiguration config = new JoglApplicationConfiguration () ; new com.badlogic.gdx.backends.jogl.JoglApplication ( new com.badlogic.gdx.tests.UITest () , config ) ; }
Collection < ? extends Issue > issues
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_news ) ; }
flushRequest . refresh ( request . paramAsBoolean ( STRING_CONSTANT , flushRequest . refresh () ) ) ;
catch ( Exception e ) { throw new ElasticSearchParseException ( STRING_CONSTANT , e ) ; }
catch ( Exception e ) { throw new DfsPhaseExecutionException ( context , STRING_CONSTANT , e ) ; }
if ( value == null ) { return null ; }
position . set ( camPos . mul ( NUMBER_CONSTANT ) ) ;
GL20 gl = Gdx.gl20 ;
multiSearchRequest . setListenerThreaded ( false ) ;
camera . setMatrices () ;
DiscoverySettings discoverySettings = internalCluster () . getInstance ( DiscoverySettings . class ) ;
Directory [] build ( ) throws IOException ;
map . getLayers () . add ( layer ) ;
{ if ( ! ( DocIdSets . isFastIterator ( ApplyAcceptedDocsFilter . unwrap ( docIdSet ) ) ) ) { return QUERY_FIRST_FILTER_STRATEGY . filteredScorer ( context , weight , docIdSet ) ; } }
{ return execute ( new TransportNodesListGatewayMetaState.Request ( nodesIds ) . setTimeout ( timeout ) ) ; }
final long t = attr.type ;
gl . glClear ( ( ( GL10.GL_COLOR_BUFFER_BIT ) | ( GL10.GL_DEPTH_BUFFER_BIT ) ) ) ;
constraints . get ( i ) . dispose () ;
{ if ( termsEnum . seekExact ( term ) ) { return useTotalTermFreq ? termsEnum . totalTermFreq () : termsEnum . docFreq () ; } return NUMBER_CONSTANT ; }
Scorer subQueryScorer = subQueryWeight . scorer ( reader , scoreDocsInOrder , false ) ;
DocumentMapper documentMapper = context . mapperService () . documentMapper ( uid . type () ) ;
if ( timeoutSet ) { collector = Lucene . wrapTimeLimitingCollector ( collector , searchContext . timeEstimateCounter () , searchContext . timeoutInMillis () ) ; }
int line = comment . getPosition () ;
target_fuzzy_pos . set ( target.collisionCenter ) . add ( random . mul ( NUMBER_CONSTANT ) ) ;
DocumentMapper mapper = mapperService . documentMapperWithAutoCreate ( STRING_CONSTANT ) . v1 () ;
BytesStreamInput siBytes = new BytesStreamInput ( data , false ) ;
frameBuffer = new FrameBuffer ( Format.RGB565 , NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ;
XContentBuilder builder = restContentBuilder ( request , false ) ;
IndexWriterConfig iwc = newIndexWriterConfig ( null ) ;
catch ( RejectedExecutionException ex ) { logger . debug ( STRING_CONSTANT , ex ) ; }
{ @ Override public void handleException ( TransportException exp ) { logger . debug ( STRING_CONSTANT , exp , node ) ; } }
if ( ! ( dynamic ) ) { throw new org.elasticsearch.indices.TypeMissingException ( index , type , STRING_CONSTANT ) ; }
if ( ( clusterService ) != null ) { context . put ( STRING_CONSTANT , clusterService . localNode () ) ; }
IndexService indexService = indicesService . indexServiceSafe ( request . index () ) ;
String builtMapping = docMapper . buildSource () ;
try { sSource = Unicode . fromBytes ( source , offset , length ) ; } catch ( Error e1 ) {}
if ( pool == null ) continue;
final Engine.Searcher searcher = indexShard . acquireSearcher ( STRING_CONSTANT ) ;
mesh = ModelLoader . loadObj ( files . readFile ( STRING_CONSTANT , Internal ) ) ;
if ( SharedLibraryLoader.isMac ) return ( STRING_CONSTANT + libraryName ) + STRING_CONSTANT ;
layer . isVisible ()
{ listener . onFailure ( new InternalException ( actionName , request ) ) ; }
final SortedDocValues singleOrds = MIN . select ( docs ) ;
if ( ( childType ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; }
lightManager . applyGlobalLights ( shader ) ;
if ( ( path ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
{ super . onException ( e ) ; ToastUtils . show ( activity , e , error_assignee_update ) ; }
{ return new InternalSearchRequest ( shardRouting ) . source ( builder . buildAsBytes () ) ; }
String [] concreteIndices = clusterState . metaData () . concreteIndices ( searchRequest . indices () , false , true ) ;
{ bind ( MergeSchedulerProvider . class ) . to ( settings . getAsClass ( MergeSchedulerModule.MergeSchedulerSettings.TYPE , ConcurrentMergeSchedulerProvider . class , STRING_CONSTANT , STRING_CONSTANT ) ) . asEagerSingleton () ; }
pipeline . addLast ( STRING_CONSTANT , new MemcachedDecoder () ) ;
runOnEDT = config.runOnEDT ;
( ( boost ) == ( - NUMBER_CONSTANT ) ) && ( ( rewrite ) == null )
String newPath = ( optionalPathPrefix + STRING_CONSTANT ) + path ;
ShingleFilter filter = new ShingleFilter ( tokenStream , minShingleSize , maxShingleSize ) ;
if ( context . includeInAll ( includeInAll , this ) ) { context . allEntries () . addText ( names . fullName () , value , boost ) ; }
{ snapshotIndexCommit . close () ; }
float regionHeight = region . getRegionHeight () ;
{ logger . debug ( STRING_CONSTANT ) ; indexShard . store () . deleteContent () ; }
indicesStatsRequest . get ( request . paramAsBoolean ( STRING_CONSTANT , indicesStatsRequest . get () ) ) ;
order = fieldData . ordinals () ;
tests [ testIndex ] . dispose () ;
{ super . onActivityCreated ( savedInstanceState ) ; ListViewUtils . configure ( getActivity () , getListView () ) ; setEmptyText ( getString ( no_filters ) ) ; }
final String executor = Names.GENERIC ;
Engine.Searcher searcher = indexShard . acquireSearcher ( STRING_CONSTANT ) ;
@ Override protected Translog create () { return new FsTranslog ( shardId , EMPTY_SETTINGS , new File ( STRING_CONSTANT ) ) ; }
Array < Actor > actors = root . getChildren () ;
GdxTest test = new SuperKoalio () ;
{ out . writeOptionalString ( ( ( metaData . writtenBy () ) == null ? null : metaData . writtenBy () . toString () ) ) ; }
Array < AssetDescriptor > deps = new Array < AssetDescriptor > () ;
{ System.out . println ( ( STRING_CONSTANT + ( event . getTarget () ) ) ) ; }
ValueAndBoost valueAndBoost = StringFieldMapper . parseCreateFieldForString ( context , null , boost ) ;
catch ( Exception e ) { logger . warn ( STRING_CONSTANT , e , name ) ; }
{ super . dispose () ; importer . deleteAllData () ; importer . dispose () ; importer = null ; }
if ( ( body ) != null ) body . dispose () ;
{ throw new UnknownHostException ( STRING_CONSTANT ) ; }
cache . draw ( batch , ( ( color.a ) * parentAlpha ) ) ;
return Streams . copyToString ( new InputStreamReader ( is , STRING_CONSTANT ) ) ;
{ logger . trace ( STRING_CONSTANT , seed ) ; Strings . randomBase64UUID ( new Random ( Long . parseLong ( seed ) ) ) ; }
{ inTapSquare = false ; panning = true ; return listener . pan ( x , y , tracker.deltaX , tracker.deltaY ) ; }
audio = new OpenALAudio ( NUMBER_CONSTANT , config.audioDeviceBufferCount , config.audioDeviceBufferSize ) ;
boolean foundTerm = topLevelIterator . seekExact ( term ) ;
{ writer = file . writer ( false ) ; toJson ( object , knownType , elementType , writer ) ; }
addIntegerFields ( context , fields , count , valueAndBoost . boost () ) ;
table . align ( ( ( Align.center ) | ( Align.top ) ) ) ;
this . audio = new IOSAudio () ;
header = new IssueHeaderViewHolder ( headerView , avatarHelper ) ;
@ Override public FieldDataType fieldDataType2 () { return new FieldDataType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
protected void clear () { groupList . clear () ; groupPool . freeAll ( usedGroups ) ; usedGroups . clear () ; }
verticesBuffer . clear () ;
{ if ( AccountConstants.ACCOUNT_TYPE . equals ( authTokenType ) ) return authTokenType ; return null ; }
{ return r1 . getName () . compareToIgnoreCase ( r2 . getName () ) ; }
ClusterHealthResponse clusterHealth = node . client () . admin () . cluster () . health ( clusterHealthRequest () . waitForGreenStatus () ) . actionGet () ;
{ if ( name . equals ( fieldName ) ) { return FieldSelectorResult.LOAD ; } return FieldSelectorResult.NO_LOAD ; }
counts . close () ;
if ( ( request . scroll () ) != null ) { scrollId = buildScrollId ( request . searchType () , queryResults . values () , null ) ; }
renderer = new MD5Renderer ( model , true , false ) ;
return new ParsedQuery ( query , parseContext . copyNamedFilters () ) ;
public ParticleEffectPool.PooledEffect obtain () { ParticleEffectPool.PooledEffect effect = super . obtain () ; effect . start () ; return effect ; }
body . applyCentralImpulse ( tmp2 . set ( ray.direction ) . scl ( NUMBER_CONSTANT ) ) ;
Geometry geometry = ( ( JtsGeometry ) ( shape ) ) . getGeom () ;
event.pointer = pointer ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Cubocy () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ; }
settingsBuilder () . put ( STRING_CONSTANT , ( ( immutableCluster () . dataNodes () ) + NUMBER_CONSTANT ) ) . put ( STRING_CONSTANT , NUMBER_CONSTANT )
mapperParser . putTypeParser ( CONTENT_TYPE , new AttachmentMapper.TypeParser () ) ;
@ Override public String [] types () { return new String [] { STRING_CONSTANT , STRING_CONSTANT } ; }
if ( ! ( docMapper . typeMapper () . fieldType () . indexed () ) ) { useTermsFilter = false ; break; }
input . processEvents () ;
long freq = NUMBER_CONSTANT ;
this . updateTasksExecutor = EsExecutors . newSinglePrioritizing ( daemonThreadFactory ( settings , STRING_CONSTANT ) ) ;
time = ( diff < NUMBER_CONSTANT ) ? duration : NUMBER_CONSTANT ;
if ( ( actor != null ) && ( ! ( actor . isDescendantOf ( this ) ) ) ) previousScrollFocus = actor ;
{ LabelDrawableSpan . setText ( labels , filterLabels ) ; labels . setVisibility ( VISIBLE ) ; }
{ super . onCreate ( savedInstanceState ) ; setTitle ( getString ( saved_filters_title ) ) ; setContentView ( issue_filter_list ) ; }
GdxTest test = new FreeTypeTest () ;
avatarHelper . bind ( assigneeAvatar , assignee ) ;
final User user
final Engine.Searcher searcher = indexShard . acquireSearcher () ;
{ textures [ i ] . reset () ; if ( ( weights ) != null ) weights [ i ] = NUMBER_CONSTANT ; }
private boolean isAuthenticatedUser () { return org . getLogin () . equals ( accountProvider . get () . getUsername () ) ; }
ObjectFloatOpenHashMap < String > indices = new ObjectFloatOpenHashMap () ;
{ LwjglApplicationConfiguration config = new LwjglApplicationConfiguration () ; new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new com.badlogic.gdx.tests.InputTest () , config ) ; }
{ return new StoreFilesMetaData ( true , shardId , indexShard . store () . list () ) ; }
protected void createIndex () { cluster () . wipeIndices ( getConcreteIndexName () ) ; createIndex ( getConcreteIndexName () ) ; }
final ThreadPool threadPool = new ThreadPool ( STRING_CONSTANT ) ;
protected void clear () { groupList . clear () ; groupPool . free ( usedGroups ) ; usedGroups . clear () ; }
GdxTest test = new InputTest () ;
{ synchronized ( BufferUtils.unsafeBuffers ) { if ( ! ( BufferUtils.unsafeBuffers . contains ( buffer , true ) ) ) return NUMBER_CONSTANT ; } return BufferUtils . getByteBufferAddress ( buffer ) ; }
catch ( Throwable ex ) { throw new IOException ( ( ( STRING_CONSTANT + jsonFile ) + STRING_CONSTANT ) , ex ) ; }
if ( ! ( dirty ) ) return worldVertices ;
if ( ( entry . bytes () . underlyingBytes () . length ) > ( CachedStreamOutput.BYTES_LIMIT ) ) { return; }
{ try { innerExecute ( request , listener ) ; } catch ( Throwable e1 ) { listener . onFailure ( e1 ) ; } }
@ Override public Pixmap newPixmap ( FileHandle file ) { return newPixmap ( file . read () ) ; }
final AtomicArray < String > nodes = new AtomicArray ( NUMBER_CONSTANT ) ;
body . applyCentralImpulse ( tmpV2 . set ( ray.direction ) . scl ( NUMBER_CONSTANT ) ) ;
{ clusterService . remove ( this ) ; listener . onFailure ( new MasterNotDiscoveredException () ) ; }
if ( ranges . isEmpty () ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( AbstractRangeBuilder . getName () ) ) + STRING_CONSTANT ) ) ; }
HandlesStreamOutput stream = CachedStreamOutput . cachedHandles () ;
joystick . set ( dx , dy ) . mul ( WorldView.JOYSTICK_DISTANCE_MULTIPLIER ) ;
new HierarchyCircuitBreakerService ( ImmutableSettings . builder () . put ( REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING , ( size - NUMBER_CONSTANT ) ) . build () , new org.elasticsearch.node.settings.NodeSettingsService ( ImmutableSettings.EMPTY ) )
logger . trace ( STRING_CONSTANT , indexShard . shardId () , request . force () ) ;
add ( name , region , Texture . class ) ;
{ entry = new InternalBoundedFullHistogramFacet.FullEntry ( index , NUMBER_CONSTANT , Double.POSITIVE_INFINITY , Double.NEGATIVE_INFINITY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; entries [ index ] = entry ; }
Query query = queryParser . parse ( querySource , querySourceOffset , querySourceLength ) . query () ;
{ return new ShardGatewaySnapshotRequest ( shard . index () , shard . id () , request ) ; }
client . prepareSearch () . setIndices ( STRING_CONSTANT ) . setSearchType ( DFS_QUERY_THEN_FETCH ) . setQuery ( termQuery ( STRING_CONSTANT , STRING_CONSTANT ) ) . setFrom ( NUMBER_CONSTANT )
pressed = ( input . isButtonPressed ( button ) ) && ( isOver ( event . getListenerActor () , x , y ) ) ;
catch ( Exception e ) { listener . onFailure ( e ) ; return true ; }
cloudBlobStore . executor ()
if ( precisionAsString != null ) { precision = Distance . parseDistance ( precisionAsString ) ; } else { precision = GeoPointCompressedIndexFieldData.DEFAULT_PRECISION_VALUE ; }
String rateLimitingType = settings . get ( AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE , AbstractIndexStore . this . rateLimitingType ) ;
tmpV . set ( cb . getHitPointWorld () . getFloats () ) ;
model = MD5Loader . loadModel ( files . internal ( STRING_CONSTANT ) . read () , false ) ;
@ Override public DocIdSetIterator iterator ( ) throws IOException { return weight . scorer ( context , acceptDocs ) ; }
ClusterStateResponse clusterStateResponse = cluster () . smartClient () . admin () . cluster () . prepareState () . setMasterNodeTimeout ( STRING_CONSTANT ) . get () ;
MapLayer layer = map . getLayers () . get ( layerIdx ) ;
Engine.Searcher searcher = shardToPurge . acquireSearcher ( STRING_CONSTANT ) ;
final btRigidBody body = btRigidBody . upcast ( obj ) ;
Iterable < FieldMapper > fieldMappers
model . calculateBoundingBox ( bbox ) ;
keyValues = keyIndexFieldData . load ( context ) . getBytesValues () ;
if ( cmp == NUMBER_CONSTANT ) { cmp = Long . compare ( tmpId , ids [ node ] ) ; }
catch ( Exception e ) { -- ( disableFlushCounter ) ; throw new RecoveryEngineException ( shardId , NUMBER_CONSTANT , STRING_CONSTANT , e ) ; }
{ return clusterState . routingTable () . allActiveShardsGrouped ( concreteIndices , true , true ) ; }
{ super . tearDown () ; serviceA . close () ; serviceB . close () ; terminate ( threadPool ) ; }
if ( indexShard . replicaShards () . isEmpty () ) { return this ; }
{ vertexAttributes . add ( VertexAttribute . ColorPacked () ) ; }
BufferUtils . disposeUnsafeByteBuffer ( byteBuffer ) ;
case id.m_apply :
fixedBitSetFilterCache . close () ;
int randomReplicaNumber = between ( NUMBER_CONSTANT , ( ( cluster () . size () ) - NUMBER_CONSTANT ) ) ;
if ( ( request . scroll () ) != null ) { scrollId = TransportSearchHelper . buildScrollId ( request . searchType () , dfsResults , null ) ; }
table . addCell ( ( masterId . equals ( node . id () ) ? STRING_CONSTANT : node . masterNode () ? STRING_CONSTANT : STRING_CONSTANT ) ) ;
new JsonHttpResponse ( request , BAD_REQUEST , JsonBuilder . jsonBuilder () . startObject () . field ( STRING_CONSTANT , t . getMessage () ) . endObject () )
StreamInput stream = new BytesStreamInput ( data , false ) ;
layers . add ( layer ) ;
return wrapSmartNameQuery ( mltQuery , smartNameFieldMappers , parseContext . indexCache () ) ;
logger . info ( ( STRING_CONSTANT + ( NestedTests.aggCollectionMode ) ) ) ;
GL20 gl = graphics . getGL20 () ;
catch ( Throwable e ) { throw new com.badlogic.gdx.utils.GdxRuntimeException ( ( ( STRING_CONSTANT + file ) + STRING_CONSTANT ) , e ) ; }
long count = NUMBER_CONSTANT ;
final int elements = scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
effectPanel . newExampleEmitter ( STRING_CONSTANT , true ) ;
( restResponse . getBodyAsString () )
( ( indexShard . mergeStats () . getCurrent () ) == NUMBER_CONSTANT )
if ( ( percolate . getMatches () . size () ) != QUERIES ) { System.err . println ( STRING_CONSTANT ) ; }
{ if ( capacity < NUMBER_CONSTANT ) { throw new IllegalArgumentException () ; } return BufferFactory . newByteBuffer ( capacity ) ; }
ModelInstance instance = new ModelInstance ( model , nodeName , true , true ) ;
{ if ( termsEnum . seekExact ( term ) ) { return useTotalTermFrequency ? termsEnum . totalTermFreq () : termsEnum . docFreq () ; } return NUMBER_CONSTANT ; }
if ( ( body ) != null ) body . delete () ;
{ assert sizeInBytes >= NUMBER_CONSTANT : ( STRING_CONSTANT + sizeInBytes ) + STRING_CONSTANT ; circuitBreakerService . getBreaker () . addWithoutBreaking ( ( - sizeInBytes ) ) ; }
bytes += translog . memorySizeInBytes () ;
if ( peripheral == ( Peripheral.MultitouchScreen ) ) return hasMultitouch ;
ThrowableObjectInputStream ois = new ThrowableObjectInputStream ( buffer , settings . getClassLoader () ) ;
cppFile . writeString ( buffer . toString () , false , STRING_CONSTANT ) ;
List < Object > values = lookup . source () . extractRawValues ( mapper . names () . fullName () ) ;
final Aggregator aggregator = path . resolveAggregator ( termsAggregator ) ;
{ Preferences prefs = new LwjglPreferences ( name ) ; preferences . put ( name , prefs ) ; return prefs ; }
ThreadPool threadPool = new ThreadPool ( STRING_CONSTANT ) ;
if ( ( scrollId == null ) && ( request . hasContent () ) ) { scrollId = request . content () . toUtf8 () ; }
case id.m_random :
Engine.Searcher engineSearcher = ( searcher == null ) ? indexShard . acquireSearcher () : searcher ;
stage . getSpriteBatch () . disableBlending () ;
logger . warn ( STRING_CONSTANT , port , multicastInterface , e . getMessage () ) ;
existing.aliases . add ( rect ) ;
return new DoubleTerms.Bucket ( value , bucket.docCount , bucket.aggregations , bucket.showDocCountError , bucket.docCountError , bucket.formatter ) ;
{ parseMultiField ( builder , name , parserContext , fieldName , fieldNode ) ; }
vboBatch = new SpriteBatch ( NUMBER_CONSTANT , NUMBER_CONSTANT , VertexDataType.VertexBufferObject ) ;
assert delete . versionType () . validateVersionForWrites ( delete . version () ) ;
if ( AccountConstants.ACCOUNT_NAME . equals ( auth . getApp () . getName () ) ) authToken = auth . getToken () ;
if ( smartNameFieldMappers != null ) { if ( smartNameFieldMappers . hasMapper () ) { query = smartNameFieldMappers . mapper () . termQuery ( value ) ; } }
Version . indexCreated ( indexSettings ) . onOrAfter ( V_1_4_0_Beta )
if ( value == null ) { return null ; }
return query ;
final long t = System . nanoTime () ;
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_members ) ; }
{ query . add ( new org.apache.lucene.search.BooleanClause ( mapper . termQuery ( value , parseContext ) , Occur.SHOULD ) ) ; }
internalSearchRequest ( shard , shardsIts . size () , request )
ids [ i ] = ( ( int ) ( Long . parseLong ( array [ i ] ) ) ) ;
Unicode.UTF16Result result = Unicode . unsafeFromBytesAsUtf16 ( json ) ;
logger . debug ( STRING_CONSTANT , sb , clusterState . version () ) ;
FieldMapper mapper = context . smartNameFieldMapper ( keyField ) ;
{ switch ( item . getItemId () ) { case id.m_apply : createGist () ; return true ; default: return super . onOptionsItemSelected ( item ) ; } }
@ Override public Type reducedType () { return SortField.DOUBLE ; }
{ concreteIndices = clusterState . metaData () . concreteIndices ( request . indicesOptions () , request . indices () ) ; }
{ recoveryTarget . retryRecovery ( request , retryAfter , recoveryStatus , this ) ; }
result = metaDataService . putMapping ( indices , request . type () , request . source () , request . ignoreConflicts () , request . timeout () )
long count = Lucene . count ( searcher , mltQuery ) ;
if ( ( indexShard . state () ) != ( IndexShardState.CLOSED ) ) { future = threadPool . schedule ( interval , SAME , TranslogService.TranslogBasedFlush . this ) ; }
@ Override public void handleException ( TransportException exp ) { onFailure ( node . id () , exp ) ; }
FieldMapper mapper = parseContext . fieldMapper ( field ) ;
{ return new InternalSearchRequest ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . source ( builder . buildAsBytes () ) ; }
touchFocusedChild = ( ( stage . getTouchFocus ( NUMBER_CONSTANT ) ) != ( this ) ) ? stage . getTouchFocus ( NUMBER_CONSTANT ) : null ;
sb . append ( STRING_CONSTANT ) . append ( recoveryStatus . translog () . currentTranslogOperations () ) . append ( STRING_CONSTANT )
XContentBuilder builder = XContentFactory . contentBuilder ( JSON , cachedEntry . bytes () ) ;
bucketsMap = new ObjectObjectOpenHashMap () ;
{ return cache ( type . fieldDataClass () , reader , fieldName ) ; }
TextureAttribute . createDiffuse ( ( ( Texture ) ( null ) ) )
gl . glGetIntegerv ( GL_MAX_TEXTURE_IMAGE_UNITS , buffer ) ;
InternalSearchRequest internalRequest = new InternalSearchRequest ( shardRouting , numberOfShards , request . searchType () ) ;
{ super . configureList ( activity , listView ) ; getListAdapter () . addHeader ( filterHeader ) ; }
clusterHealth = client ( STRING_CONSTANT ) . admin () . cluster () . health ( clusterHealthRequest () . waitForGreenStatus () ) . actionGet () ;
protected void createIndex () { cluster () . wipeIndices ( getConcreteIndexName () ) ; createIndex ( getConcreteIndexName () ) ; }
GdxTest test = new MusicTest () ;
rootObject ( STRING_CONSTANT ) . add ( object ( STRING_CONSTANT ) . add ( stringField ( STRING_CONSTANT ) . store ( true ) . index ( false ) ) )
builder . byteSizeField ( IndicesSegmentResponse.Fields.SIZE_IN_BYTES , IndicesSegmentResponse.Fields.SIZE , segment . getSizeInBytes () ) ;
context . reader () . document ( doc , fieldVisitor ) ;
{ try { indexShard . refresh ( new Engine.Refresh () . force ( false ) ) ; } catch ( Throwable e ) {} }
final BytesValues values = fieldData . load ( context ) . getBytesValues () ;
GdxTest test = new NewModelTest () ;
GdxTest test = new TextureBindTest () ;
{ super . onCreate ( savedInstanceState ) ; initialize ( new Metagun () , false ) ; }
builder . append ( CHAR_CONS ) . append ( NetworkUtils . getLocalHostName ( STRING_CONSTANT ) ) ;
Filter nestedFilter = Queries . wrap ( new org.apache.lucene.search.join.ToParentBlockJoinQuery ( query , parentFilter , ScoreMode.None ) , parseContext ) ;
public CharSequence getText () { return label . getText () ; }
{ out . writeOptionalString ( ( ( writtenBy ) == null ? null : writtenBy . toString () ) ) ; }
modules . add ( AttachmentsIndexModule . class ) ;
avatar . setImageDrawable ( null ) ;
boolean handled = gui . handleMouse ( x , y , button , false ) ;
buffers [ offset ] = GL15 . glGenBuffers () ;
{ super . doSetNextReader ( context ) ; script . setNextReader ( context ) ; }
doc . add ( new org.apache.lucene.document.Field ( STRING_CONSTANT , STRING_CONSTANT , Defaults.FIELD_TYPE ) ) ;
TransportSearchQueryThenFetchAction.AsyncAction . this . addShardFailure ( shardIndex , shardTarget , t ) ;
Settings settings = ImmutableSettings . settingsBuilder () . put ( STRING_CONSTANT , NUMBER_CONSTANT ) . build () ;
org.elasticsearch.action.support.IndicesOptions . fromRequest ( request , org.elasticsearch.action.support.IndicesOptions . strictExpandOpen () )
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( getString ( no_members ) ) ; ListViewUtils . configure ( getActivity () , getListView () ) ; }
scrollPane . setOverscroll ( false ) ;
countRequest . minScore ( paramAsFloat ( request . param ( STRING_CONSTANT ) , DEFAULT_MIN_SCORE ) ) ;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new BulletTestCollection () , config ) ; }
protected void createIndex () { immutableCluster () . wipeIndices ( getConcreteIndexName () ) ; createIndex ( getConcreteIndexName () ) ; }
modelBatch . render ( lights , instance ) ;
app . log ( STRING_CONSTANT , ( ( ( STRING_CONSTANT + ( manager . getDiagnostics () ) ) + STRING_CONSTANT ) + ( Texture . getManagedStatus () ) ) )
return frameRate ;
String [] fragments ;
{ return Font . createFont ( Font.TRUETYPE_FONT , files . absolute ( ttfFileRef ) . read () ) ; }
{ channel . sendResponse ( new XContentThrowableRestResponse ( request , e ) ) ; }
( used >= NUMBER_CONSTANT ) && ( avail >= NUMBER_CONSTANT )
if ( asyncMerge ) { mergePolicy = new LogByteSizeMergePolicyProvider.EnableMergeLogByteSizeMergePolicy ( this ) ; } else { mergePolicy = new LogByteSizeMergePolicyProvider.CustomLogByteSizeMergePolicy ( this ) ; }
GdxTest test = new VoxelTest () ;
renderer . begin ( Triangle ) ;
context . setDepthTest ( true , GL_LEQUAL ) ;
validate () ;
{ postPrimaryOperation ( request , response ) ; listener . onResponse ( response . response () ) ; replicaCounter = Integer.MIN_VALUE ; }
FileSystemUtils . mkdirs ( this . location ) ;
{ view = super . initialize ( view ) ; TypefaceUtils . setOcticons ( textView ( NUMBER_CONSTANT ) ) ; return view ; }
return new ByteValuesComparator ( indexFieldData , dMissingValue , numHits , reversed ) ;
@ Override public boolean isDone () { return ( currAction ) >= ( actions . size () ) ; }
final int numNodes = immutableCluster () . dataNodes () ;
setTitle ( issues_title ) ;
catch ( Throwable e1 ) { onFailure ( e ) ; }
public boolean handle ( T event ) { ( current ) ++ ; return ( current ) >= ( count ) ; }
BytesReference source
TransportSearchDfsQueryAndFetchAction.AsyncAction . this . addShardFailure ( new ShardSearchFailure ( t ) ) ;
filterId . append ( entry . getKey () ) . append ( CHAR_CONS ) . append ( entry . getValue () ) . append ( CHAR_CONS ) ;
{ flush ( new Flush () . type ( COMMIT ) ) ; }
return out . bytes () . copyBytesArray () . toBytes () ;
settingsBuilder () . put ( STRING_CONSTANT , between ( immutableCluster () . dataNodes () , DEFAULT_MAX_NUM_SHARDS ) ) . put ( STRING_CONSTANT , NUMBER_CONSTANT )
if ( SharedLibraryLoader.isMac ) return ( STRING_CONSTANT + libraryName ) + ( SharedLibraryLoader.is64Bit ? STRING_CONSTANT : STRING_CONSTANT ) ;
stage . getBatch () . disableBlending () ;
root . add ( new com.badlogic.gdx.scenes.scene2d.ui.ScrollPane ( labels , skin ) ) . expand () . fill () ;
public InputStream getInputStream () { if ( ! ( path . endsWith ( STRING_CONSTANT ) ) ) return null ; return fileHandle . read () ; }
Array < AssetDescriptor > deps = new Array () ;
ChannelBuffer buffer = ChannelBuffers . dynamicBuffer ( NUMBER_CONSTANT , channel . getConfig () . getBufferFactory () ) ;
constraints . get ( i ) . delete () ;
{ nonMasterNode = randomFrom ( internalCluster () . getNodeNames () ) ; if ( nonMasterNode . equals ( masterNode ) ) { nonMasterNode = null ; } }
sortedShardList = searchPhaseController . sortDocs ( request , useSlowScroll , firstResults ) ;
if ( smartNameFieldMappers != null ) { if ( smartNameFieldMappers . hasMapper () ) { filter = smartNameFieldMappers . mapper () . fieldFilter ( value , parseContext ) ; } }
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new DownloadTest () , config ) ; }
version = UidField . loadVersion ( hitContext . readerContext () , new org.apache.lucene.index.Term ( UidFieldMapper.NAME , hitContext . fieldVisitor () . uid () . toBytesRef () ) )
return new IOSApplication ( new Box2DTestCollection () , config ) ;
{ app . debug ( STRING_CONSTANT , STRING_CONSTANT ) ; renderer . dispose () ; controlRenderer . dispose () ; }
if ( filterName != null ) { parseContext . addNamedFilter ( filterName , new org.elasticsearch.index.search.child.CustomQueryWrappingFilter ( childrenConstantScoreQuery ) ) ; }
{ super . onActivityCreated ( savedInstanceState ) ; ListViewUtils . configure ( getActivity () , getListView () ) ; }
return new Vector2 ( target.collisionCenter ) . sub ( relativeVel . mul ( Math . max ( NUMBER_CONSTANT , time_to_target ) ) ) ;
renderer . render ( world , cam.combined ) ;
mapperParser . putTypeParser ( JSON_TYPE , new JsonAttachmentMapper.TypeParser () ) ;
if ( state . metaData () . aliases () . containsKey ( request.index ) ) { throw new org.elasticsearch.indices.IndexAlreadyExistsException ( new Index ( request.index ) , STRING_CONSTANT ) ; }
new org.elasticsearch.index.translog.fs.FsTranslog ( shardId , EMPTY_SETTINGS , new File ( STRING_CONSTANT ) )
TopChildrenQuery childQuery = new TopChildrenQuery ( query , childType , parentType , scoreType , factor , incrementalFactor ) ;
incrementBucketDocCount ( bucketOrd , numChildren ) ;
result . toJson ( builder , request ) ;
headerHolder = new GistHeaderViewHolder ( headerView ) ;
DocumentMapper docMapper = indexService . mapperService () . documentMapper ( request . type () ) ;
ClusterStateRequest clusterStateRequest = Requests . clusterStateRequest () . filterRoutingTable ( true ) . filterNodes ( true ) . filteredIndices ( indices ) ;
assertThat ( doc . doc () . getFieldable ( STRING_CONSTANT ) , notNullValue () ) ;
client () . prepareUpdate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . setInlineScript ( STRING_CONSTANT ) . setScriptLang ( STRING_CONSTANT ) . setScriptParams ( params ) . get () ;
if ( mapper != null ) { name = mapper . names () . fullName () ; value = mapper . valueForSearch ( field ) ; }
return os . bytes () . copyBytesArray () . toBytes () ;
ensureGreen () ;
String publishHost = HostResolver . resolvePublishHostAddress ( settings . get ( STRING_CONSTANT ) , settings , LOCAL_IP ) . getHostAddress () ;
GdxTest test = new FreeTypeTest () ;
{ fail () ; }
public Vector3 getCenter ( Vector3 out ) { return out . set ( cnt ) ; }
buffer . append ( type . getName () ) ;
if ( filterName != null ) { parseContext . addNamedFilter ( filterName , new org.elasticsearch.index.search.child.CustomQueryWrappingFilter ( parentConstantScoreQuery ) ) ; }
String [] headers = new String [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT } ;
return add ( new Label ( text , skin . get ( labelStyleName , LabelStyle . class ) ) ) ;
return massData ;
TransportException exp
{ index ( STRING_CONSTANT , STRING_CONSTANT , ( STRING_CONSTANT + i ) , jsonBuilder () . startObject () . endObject () ) ; }
final IntArray hashes = NON_RECYCLING_INSTANCE . newIntArray ( ( NUMBER_CONSTANT + valueCount ) ) ;
@ Override public String executor () { return Names.GENERIC ; }
if ( state . metaData () . aliases () . containsKey ( request.index ) ) { throw new org.elasticsearch.indices.InvalidIndexNameException ( new Index ( request.index ) , request.index , STRING_CONSTANT ) ; }
{ return new org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter ( version , tokenStream , wordList , minWordSize , minSubwordSize , maxSubwordSize , onlyLongestMatch ) ; }
if ( ( boost == NUMBER_CONSTANT ) && ( normsField == null ) ) { return new org.apache.lucene.search.DeletionAwareConstantScoreQuery ( Queries.MATCH_ALL_FILTER , true ) ; }
@ Override public float getPosition () { return ( ( float ) ( ( track . getCurrentTime () ) * NUMBER_CONSTANT ) ) ; }
public void draw ( SpriteBatch batch , float parentAlpha ) { validate () ; super . draw ( batch , parentAlpha ) ; }
ElasticsearchRestTests.restTestExecutionContext . resetClient ( cluster () . httpAddresses () ) ;
catch ( Exception e ) { throw new QueryPhaseExecutionException ( searchContext , e ) ; }
threadPool = new ThreadPool ( getClass () . getName () ) ;
sb . append ( STRING_CONSTANT ) . append ( context . parsedQuery () . query () ) . append ( STRING_CONSTANT ) . append ( context . from () )
filter = parseContext . cacheFilter ( filter ) ;
( ( mesh . getMesh () . getMaximumVertices () ) / NUMBER_CONSTANT ) < ( text . length () )
ChunkEncoder enc = new ChunkEncoder ( length , BufferRecycler . instance () ) ;
net = new AndroidNet () ;
while ( ( immutableCluster () . size () ) != NUMBER_CONSTANT ) { cluster () . stopRandomNode () ; }
setTitle ( gists_title ) ;
final Client client = cluster () . smartClient () ;
new SortField ( fieldMapper . names () . indexName () , context . fieldData () . getForField ( fieldMapper ) . comparatorSource ( missing ) , reverse )
assertThat ( clusterStateResponse . getState () . nodes () . nodes () . size () , is ( immutableCluster () . size () ) ) ;
TransportRequestOptions.TransportRequestOptions . options () . withCompress ( true )
{ final Recycler.V < ? > v = recycler . obtain () ; v . close () ; }
final Query rewritten = new XFilteredQuery ( queryRewritten , filter , strategy ) ;
int numUniqueQueries = between ( NUMBER_CONSTANT , ( numQueries / NUMBER_CONSTANT ) ) ;
{ builder . startArray ( fieldName ) . value ( lon ) . value ( lat ) . endArray () ; }
@ Override public Pixmap newPixmap ( FileHandle file ) { return newPixmap ( file . readFile () ) ; }
{ startActivityForResult ( GistsViewActivity . createIntent ( items , position ) , RequestCodes.GIST_VIEW ) ; }
final AudioDevice device = app . getAudio () . newAudioDevice ( NUMBER_CONSTANT , false ) ;
return out . toString () ;
{ logger . trace ( STRING_CONSTANT , executionId , request . numberOfActions () , new ByteSizeValue ( request . estimatedSizeInBytes () ) , response . getTook () ) ; }
{ orgs = accountDataManager . getOrgs ( false ) ; }
{ return new ShardSuggestRequest ( shard . shardId () , request ) ; }
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new Cubocy () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; app . setLogLevel ( LOG_DEBUG ) ; }
Engine.Searcher searcher = shard . acquireSearcher ( STRING_CONSTANT ) ;
new MetaDataIndexTemplateService.RemoveRequest ( request . getName () )
{ super . onException ( e ) ; ToastUtils . show ( activity , e , error_collaborators_load ) ; }
Array < AssetDescriptor > dependencies = new Array < AssetDescriptor > () ;
logoSprite . getRegion () . flip ( false , true ) ;
assertThat ( custom5 . charFilters () [ NUMBER_CONSTANT ] , instanceOf ( MappingCharFilterFactory . class ) ) ;
Blob blob = cloudBlobStore . async () . newBlob ( buildBlobPath ( blobName ) ) ;
if ( ( request . scroll () ) != null ) { scrollId = buildScrollId ( request . searchType () , dfsResults , null ) ; }
( ( ( STRING_CONSTANT + ( i * BATCH ) ) + STRING_CONSTANT ) + ( stopWatch . stop () . lastTaskTime () ) )
ETC1 . encodeImagePKM ( pixmap ) . write ( new com.badlogic.gdx.files.FileHandle ( inputFile.outputFile ) ) ;
event . getListenerActor () . moveBy ( deltaX , deltaY ) ;
modules . add ( new org.elasticsearch.index.shard.IndexShardModule ( indexSettings , shardId ) ) ;
client ( STRING_CONSTANT ) . admin () . cluster () . health ( clusterHealthRequest ( STRING_CONSTANT ) . waitForYellowStatus () . waitForRelocatingShards ( NUMBER_CONSTANT ) . waitForActiveShards ( NUMBER_CONSTANT ) )
for ( IndexMetaData indexMetaData : updatedState . metaData () . indices () . values () ) { routingTableBuilder . addAsRecovery ( indexMetaData ) ; }
if ( ( dist ) > ( maxDist ) ) { dir . scl ( ( - NUMBER_CONSTANT ) ) ; dist = NUMBER_CONSTANT ; }
{ prefSize ( new Fixed ( width ) ) ; return this ; }
GdxTest test = new ProgressiveJPEGTest () ;
SearchScript searchScript = new SearchScript ( context . lookup () , scriptLang , script , params , context . scriptService () ) ;
final btRigidBody body = ( ( btRigidBody ) ( obj ) ) ;
{ builder . startObject ( IdCacheStats.Fields.ID_CACHE ) ; builder . byteSizeField ( IdCacheStats.Fields.MEMORY_SIZE_IN_BYTES , IdCacheStats.Fields.MEMORY_SIZE , memorySize ) ; builder . endObject () ; return builder ; }
if ( filter != null ) { context . parsedPostFilter ( filter ) ; }
new ProjectFile ( STRING_CONSTANT , ( ( STRING_CONSTANT + mainClass ) + STRING_CONSTANT ) , true )
bind ( String . class ) . annotatedWith ( IndexerIndexName . class ) . toInstance ( Conf . indexName ( settings ) ) ;
DocumentMapper documentMapper = context . mapperService () . documentMapper ( hit . type () ) ;
{ return ClusterState.Builder . readFrom ( new BytesStreamInput ( data , false ) , localNode ) ; }
{ fieldName = smartNameFieldMappers . mapper () . names () . indexName () ; valueBytes = smartNameFieldMappers . mapper () . indexedValueForSearch ( value ) ; }
{ return parse ( file . reader ( STRING_CONSTANT ) ) ; }
shardEntry . moveFromPrimary () ;
@ Override int compareTerm ( SignificantTerms.Bucket other ) { return Long . compare ( term , other . getKeyAsNumber () . longValue () ) ; }
byte [] data = os . bytes () . toBytes () ;
{ if ( ! ( IndexMetaData . hasDynamicSetting ( key ) ) ) { removedSettings . add ( key ) ; } }
Array < AssetDescriptor > dependencies = Array . of ( AssetDescriptor . class ) ;
if ( compress ) { options . withCompress ( true ) ; }
return os . copiedByteArray () ;
if ( AbstractStore . isChecksum ( file . getName () ) ) { continue; }
dst [ ii ] = ( src [ i ] ) * scale ;
hash = new BytesRefHash ( randomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , maxLoadFactor , BigArraysTests . randombigArrays () ) ;
( isDisabled ) && ( ( style.imageDisabled ) != null )
IntArray hashes = NON_RECYCLING_INSTANCE . newIntArray ( ordinals . getMaxOrd () ) ;
( STRING_CONSTANT . equals ( currentFieldName ) ) || ( STRING_CONSTANT . equals ( currentFieldName ) )
( original == ( searchContext . query () ) ) || ( original == ( searchContext . parsedQuery () . query () ) )
public ClusterRerouteRequestBuilder setSource ( BytesReference source ) throws Exception { request . setSource ( source ) ; return this ; }
TouchEvent event = input.usedTouchEvents . obtain () ;
termsIndex = indexFieldData . load ( context ) . getBytesValues () ;
world . step ( app . getGraphics () . getDeltaTime () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Sprite sprite = atlas . createSprite ( imageName ) ;
final float acceptableOverheadRatio = settings . getAsFloat ( STRING_CONSTANT , DEFAULT ) ;
ensureYellow () ;
( fieldMapping == null ) && ( indexCreatedVersion . onOrAfter ( V_1_4_0_Beta1 ) )
countRequest . query ( RestActions . parseQuerySource ( request ) ) ;
BytesStreamInput in = new BytesStreamInput ( out . bytes () . toBytes () , false ) ;
( curTerms . hasPayloads () ) && ( ( currentPayloads [ i ] . length () ) > NUMBER_CONSTANT )
builder . field ( TYPE ) ;
{ if ( Lucene . indexExists ( store . directory () ) ) { version = Lucene . readSegmentInfos ( store . directory () ) . getVersion () ; } }
searchResponse . getHits ()
GdxTest test = new Box2DTest () ;
Array < AssetDescriptor > deps = Array . of ( AssetDescriptor . class ) ;
queryStringBuilder . lenient ( request . paramAsBoolean ( STRING_CONSTANT , null ) ) ;
{ System.out . println ( viewport . getClass () . getSimpleName () ) ; viewport . update ( width , height ) ; }
{ if ( engine . refreshNeeded () ) { refresh ( new Engine.Refresh ( false ) ) ; } }
setContentView ( pager_with_title ) ;
List < ContextDocIdSet > filteredEntries = new java.util.ArrayList ( docSets . size () ) ;
sb . append ( STRING_CONSTANT ) . append ( context . originalQuery () ) . append ( STRING_CONSTANT ) . append ( context . from () ) . append ( STRING_CONSTANT )
String scaledPackFileName = rootSettings . scaledPackFileName ( packFileName , i ) ;
{ if ( ( suggestBuilder ) == null ) { suggestBuilder = new SuggestBuilder ( STRING_CONSTANT ) ; } return suggestBuilder ; }
if ( ( query () ) == null ) { parsedQuery ( ParsedQuery . parsedMatchAllQuery () ) ; }
{ super . onCreate ( bundle ) ; initialize ( false ) ; getGraphics () . setRenderListener ( new FixedPointMeshTest () ) ; }
float height = ( this . height ) * ( scaleY ) ;
if ( fontColor != null ) label . getStyle () . fontColor = fontColor ;
return new RequestReader ( file , AccountDataManager.FORMAT_VERSION ) . read () ;
ListViewUtils . configure ( getActivity () , getListView () ) ;
if ( ! ( this . name . equals ( name ) ) ) return false ;
PostingsFormatProvider postingsFormat = mapperService . indexName ( field ) . mapper () . postingsFormatProvider () ;
TermsEnum globalTermsEnum = valueSource . globalBytesValues () . getTermsEnum () ;
{ throw new SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; }
centroid.y = ( ( x1 + x2 ) + x3 ) / NUMBER_CONSTANT ;
getRequest . realtime ( request . paramAsBoolean ( STRING_CONSTANT , null ) ) ;
protected void updateRelative ( float percentDelta ) { actor . rotate ( ( ( amount ) * percentDelta ) ) ; }
IndexGeoPointFieldData < ? > indexFieldData = parseContext . getForField ( mapper ) ;
{ return new org.apache.lucene.search.FuzzyQuery ( names () . createIndexNameTerm ( value ) , ( ( float ) ( minSim ) ) , prefixLength , maxExpansions ) ; }
builder . startObject ( entry . getKey () , NONE ) ;
onGoingRecovery.recoveryState . getIndex () . addRecoveredByteCount ( content . length () ) ;
{ @ Override public void handleException ( RemoteTransportException exp ) { logger . debug ( STRING_CONSTANT , exp , node ) ; } }
float angle = ( ( float ) ( Math . atan2 ( y , x ) ) ) * ( MathUtils.radiansToDegrees ) ;
{ app . log ( STRING_CONSTANT , shader . getLog () ) ; app . exit () ; }
builder . startObject ( getName () ) . startObject ( type ) . field ( STRING_CONSTANT , STRING_CONSTANT ) . field ( STRING_CONSTANT , STRING_CONSTANT )
Query query = indexQueryParser . parse ( qSourceParser ) . query () ;
if ( ! ( customBoost () ) ) { field . setBoost ( boost ) ; }
indexRandom ( false , false , false , Arrays . asList ( builders ) ) ;
{ Preferences prefs = new LwjglPreferences ( name , STRING_CONSTANT ) ; preferences . put ( name , prefs ) ; return prefs ; }
boolean escape = false ;
scriptField . script () . setNextReader ( hitContext . readerContext () ) ;
cnt . set ( min ) . add ( max ) . mul ( NUMBER_CONSTANT ) ;
if ( smartNameFieldMappers != null ) { if ( smartNameFieldMappers . hasMapper () ) { query = smartNameFieldMappers . mapper () . fieldQuery ( value , parseContext ) ; } }
for ( FormatDateTimeFormatter dateTimeFormatter : dateTimeFormatters ) { builder . value ( dateTimeFormatter . format () ) ; }
Query query = indexQueryParser . parse ( jp ) ;
shardStatus.translogOperations = indexShard . translog () . estimatedNumberOfOperations () ;
@ Override protected TransportRequestOptions options () { return TransportRequestOptions . options () . withLowType () . withCompress ( true ) ; }
appendProperties ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , TESTS_ENABLE_MOCK_MODULES , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
indexRandom ( true , builders ) ;
{ LabelDrawableSpan . setText ( view.labelsText , labels ) ; view.labelsText . setVisibility ( View.VISIBLE ) ; }
if ( ( lookup ) == null ) { lookup = new SearchLookup ( mapperService () , indexCache () . fieldData () , null ) ; }
{ collector . setNextReader ( context ) ; docSet = DocSets . convert ( context . reader () , filter . getDocIdSet ( context , null ) ) ; }
metaDataBlobContainer . writeBlob ( newMetaData , new ByteArrayInputStream ( out . underlyingBytes () , NUMBER_CONSTANT , out . size () ) , out . size () ) ;
PercolatorExecutor.Response percolate = percolatorService . percolate ( new PercolatorExecutor.SourceRequest ( request . type () , request . source () ) ) ;
ui = new Stage () ;
GdxTest test = new FullscreenTest () ;
{ xContentParser = XContentFactory . xContent ( source ) . createParser ( source ) ; root = xContentParser . mapOrdered () ; }
if ( ( type ) != null ) { builder . field ( STRING_CONSTANT , type . toString () . toLowerCase ( ENGLISH ) ) ; }
if ( ! ( ArraySelection . isCtrlPressed () ) ) selected . clear () ;
{ return inflater . inflate ( comment_list , null ) ; }
e.transform . getTranslation ( FrustumCullingTest.tmpV ) ;
if ( ( preferUnallocatedShardUnassignedStrategy ) != null ) { changed |= preferUnallocatedShardUnassignedStrategy . allocateUnassigned ( routingNodes , nodes ) ; }
BytesRef type = parser . bytes () ;
public ParticleEffectPool.PooledEffect obtain () { ParticleEffectPool.PooledEffect effect = super . obtain () ; effect . reset () ; return effect ; }
for ( Facet facet : facets ) { facetsAsMap . put ( facet . getName () , facet ) ; }
if ( impulse != null ) { ball . applyLinearImpulse ( impulse , ball . getWorldCenter () ) ; flashForFrames ( NUMBER_CONSTANT ) ; }
int shardNo = Math . max ( NUMBER_CONSTANT , cluster () . size () ) ;
return new RecoveryStatus ( Index.EMPTY , Translog.EMPTY ) ;
{ TypeParsers . parseMultiField ( builder , name , parserContext , fieldName , fieldNode ) ; }
progress . setMessage ( getString ( creating_issue ) ) ;
actionBar . setSubtitle ( repositories ) ;
{ return new PrioritizedCallable.Wrapped ( callable , priority ) ; }
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new MultitouchTest () , config ) ; }
{ while ( ( token = parser . nextToken () ) != ( Token.END_ARRAY ) ) { shell . add ( GeoUtils . parseGeoPoint ( parser ) ) ; } }
IndexRequestBuilder [] builders = new IndexRequestBuilder [ scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ] ;
{ try { block . await () ; } catch ( InterruptedException e ) { fail () ; } }
@ Override public TokenStream create ( TokenStream tokenStream ) { return new org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter ( Version.LUCENE_48 , tokenStream , stopTags ) ; }
{ try { lock . close () ; } catch ( IOException e ) { logger . warn ( STRING_CONSTANT , e , lock ) ; } }
searchSourceBuilder . explain ( request . paramAsBoolean ( STRING_CONSTANT , null ) ) ;
if ( file . exists () ) return true ;
FieldMapper keyFieldMapper = context . smartNameFieldMapper ( keyField ) ;
StreamOutput stream = cachedEntry . handles ( CompressorFactory . defaultCompressor () ) ;
{ attributes [ ( idx ++ ) ] = new VertexAttribute ( Usage.TextureCoordinates , NUMBER_CONSTANT , ( ( ShaderProgram.TEXCOORD_ATTRIBUTE ) + i ) ) ; }
sortedShardList = searchPhaseController . sortDocs ( request , useSlowScroll , queryFetchResults ) ;
if ( STRING_CONSTANT . equals ( currentFieldName ) ) { normsField = parseContext . indexName ( jp . getText () ) ; }
TouchEvent event = input.usedTouchEvents . add () ;
IndexTemplateMetaData template = Builder . fromXContentStandalone ( parser ) ;
PercolateShardRequest shardRequest = new PercolateShardRequest ( new ShardId ( index , shardId ) ) ;
ByteBuffer bytebuffer = BufferUtils . newUnsafeByteBuffer ( ( NUMBER_CONSTANT * NUMBER_CONSTANT ) ) ;
{ searchScript . setNextReader ( context ) ; return BitsFilteredDocIdSet . wrap ( new ScriptFilterParser.ScriptFilter.ScriptDocSet ( context . reader () , searchScript ) , acceptDocs ) ; }
{ final Logger logger = Logger . getLogger ( name ) ; return new JdkESLogger ( prefix , name , logger ) ; }
{ return new ObjectObjectOpenHashMap ( capacity ) ; }
equalTo ( PARTIAL )
{ return new SignificantStringTerms ( subsetSize , supersetSize , getName () , requiredSize , minDocCount , buckets ) ; }
return new ParsedQuery ( query , parseContext . copyNamedFilters () , parseContext . copyScopePhases () ) ;
final SinglePassStatistics single = new SinglePassStatistics () ;
JsonBuilder builder = RestJsonBuilder . restJsonBuilder ( request ) . prettyPrint () ;
int digits = Math . max ( TypefaceUtils . getMaxDigits ( numbers ) , NUMBER_CONSTANT ) ;
SpriteBatch spriteBatch = ( ( SpriteBatch ) ( stage . getBatch () ) ) ;
map . close () ;
DocsEnum docsEnum = termsEnum . docs ( acceptDocs , null , FLAG_NONE ) ;
cache . setColor ( BLUE , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
HandlesStreamInput in = new HandlesStreamInput ( new org.elasticsearch.common.io.stream.BytesStreamInput ( bytesOut . copiedByteArray () , false ) ) ;
Query facetQuery = indexQueryParser . parse ( jp ) ;
assertThat ( fieldData . ramBytesUsed () , greaterThan ( NUMBER_CONSTANT ) ) ;
( hit == null ) || ( ! ( hit . isDescendantOf ( actor ) ) )
catch ( Throwable e ) { logger . warn ( STRING_CONSTANT , e ) ; }
( ( ( ( ( STRING_CONSTANT + ( hit . getId () ) ) + STRING_CONSTANT ) + i ) + STRING_CONSTANT ) + shardStatus )
{ super . onSuccess ( gist ) ; startActivity ( GistsViewActivity . createIntent ( gist ) ) ; setResult ( RESULT_OK ) ; finish () ; }
{ if ( ( nullValue ) == null ) { return null ; } return termFilter ( nullValue , null ) ; }
modules . add ( new org.elasticsearch.index.settings.IndexSettingsModule ( index , indexSettings ) ) ;
Query query = mapper . fuzzyQuery ( term . text () , fuzziness , fuzzyPrefixLength , maxExpansions , transpositions ) ;
projX = ( verts1 [ ( ( j + NUMBER_CONSTANT ) % length1 ) ] ) - ( verts1 [ ( i + NUMBER_CONSTANT ) ] )
internalCluster () . clientNodeClient ()
{ return clusterState . routingTable () . allAssignedShardsGrouped ( concreteIndices , true ) ; }
return jtsGeometry ( geometry ) ;
String [] sAttrs = Strings . splitStringToArray ( attributes , CHAR_CONS ) ;
this . graphics = new IOSGraphics ( getBounds ( null ) , this , input , gl20 ) ;
{ out . writeBoolean ( true ) ; out . writeBytesReference ( entry . source () ) ; }
BufferUtils . disposeUnsafeByteBuffer ( bytebuffer ) ;
public static void registerStreams () { InternalFullHistogramFacet . registerStreams () ; InternalCountHistogramFacet . registerStreams () ; }
app . log ( STRING_CONSTANT , ( STRING_CONSTANT + ( atlas . getTextures () . size () ) ) ) ;
Term uidTerm = new Term ( UidFieldMapper.NAME , Uid . createUidAsBytes ( request . type () , request . id () ) ) ;
if ( numberOfShardsToAllocate <= NUMBER_CONSTANT ) { continue; }
soundId = sound . play ( volume . getValue () ) ;
if ( requestCode == ( RequestCodes.ISSUE_VIEW ) ) { notifyDataSetChanged () ; forceRefresh () ; return; }
{ return new ShardRefreshRequest ( shard . shardId () , request ) ; }
avatarView . setImageDrawable ( null ) ;
indexRandom ( true , false , builders ) ;
InternalIndexShard indexShard = ( ( InternalIndexShard ) ( indicesService . indexService ( index ) . shardSafe ( shardId ) ) ) ;
float width = font . getBounds ( text ) . width ;
spriteCache = new SpriteCache ( NUMBER_CONSTANT , true ) ;
ui . getViewport () . update ( width , height , true ) ;
{ return execute ( new TransportNodesListGatewayStartedShards.Request ( shardId , nodesIds ) . setTimeout ( timeout ) ) ; }
setTitle ( repositories_title ) ;
docTerms = indexFieldData . load ( context ) . getBytesValues ( false ) ;
protected Query zeroTermsQuery () { return ( zeroTermsQuery ) == ( MatchQuery.ZeroTermsQuery.NONE ) ? MatchNoDocsQuery.INSTANCE : Queries . newMatchAllQuery () ; }
( fieldMapping == null ) && ( indexCreatedVersion . onOrAfter ( V_1_4_0_Beta ) )
new org.elasticsearch.search.internal.DefaultSearchContext ( NUMBER_CONSTANT , new ShardSearchRequest () . types ( request . types () ) , null , indexShard . acquireSearcher () , indexService , indexShard , scriptService , cacheRecycler )
boolean helpWanted = request . paramAsBoolean ( STRING_CONSTANT , request . paramAsBoolean ( STRING_CONSTANT , false ) ) ;
new MetaDataIndexTemplateService.PutRequest ( request . cause () , request . getName () ) . template ( request . template () ) . order ( request . order () )
public void invalidate () { needsLayout = true ; getTable () . sizeInvalid = true ; }
StreamOutput stream = cachedEntry . handles () ;
i < ( ( immutableCluster () . size () ) * NUMBER_CONSTANT )
( ( System . currentTimeMillis () ) - ( cachedStats . getTimestamp () ) ) > ( refreshInterval . millis () )
float color = Float . intBitsToFloat ( ( intBits & - NUMBER_CONSTANT ) ) ;
{ keys . close () ; }
if ( pref == null ) { pref = new GwtPreferences ( name ) ; prefs . put ( name , pref ) ; }
if ( ( time < NUMBER_CONSTANT ) || ( time > ( anim.totalDuration ) ) ) throw new IllegalArgumentException ( STRING_CONSTANT ) ;
Queries . isConstantMatchAllQuery ( query )
title . setText ( description ) ;
{ super . onCreate ( savedInstanceState ) ; initialize ( new SuperJumper () , false ) ; }
String bodySettings = request . content () . toUtf8 () ;
( ( worldVertices ) == null ) || ( ( worldVertices.length ) != ( localVertices.length ) )
{ if ( smartNameFieldMappers . hasMapper () ) { query = smartNameFieldMappers . mapper () . fuzzyQuery ( value , minSimilarity , prefixLength , maxExpansions , transpositions ) ; } }
{ model . setAnimation ( animation , time , true ) ; model . render () ; }
indexShard . refresh ( new Engine.Refresh ( false ) ) ;
shardStates = new ObjectLongOpenHashMap () ;
if ( ( meshPart.primitiveType ) != ( GL20.GL_TRIANGLES ) ) throw new GdxRuntimeException ( STRING_CONSTANT ) ;
{ return new Vector3 ( origin ) . add ( direction . tmp () . mul ( distance ) ) ; }
if ( ( ! addedReleaseListener ) && ( content instanceof Releasable ) ) { ( ( Releasable ) ( content ) ) . close () ; }
{ channel . sendResponse ( new BytesRestResponse ( request , RestStatus.BAD_REQUEST , new SettingsException ( STRING_CONSTANT , e ) ) ) ; }
{ return MVEL . compileExpression ( script . trim () , new org.mvel2.ParserContext ( parserConfiguration ) ) ; }
sprite . computeVertices ( vertices , idx ) ;
{ builder . startObject ( name ) . field ( type ) ; sourceBuilder () . toXContent ( builder , params ) ; return builder . endObject () ; }
{ target.rotation = ( startRotation ) + ( rotation ) ; }
color = Float . intBitsToFloat ( ( intBits & - NUMBER_CONSTANT ) ) ;
assertThat ( nodesMap . size () , equalTo ( cluster () . size () ) ) ;
{ orientation = viewController . getInterfaceOrientation () ; }
if ( ( listener ) != null ) { listener . error ( assetDesc.fileName , assetDesc.type , t ) ; } else { throw new GdxRuntimeException ( t ) ; }
{ return new org.elasticsearch.common.lucene.all.AllTermQuery ( termFactory . createTerm ( value ) ) ; }
List < Object > textsToHighlight = HighlightUtils . loadFieldValues ( fieldMapper , context , hitContext ) ;
HasParentFilter parentFilter = HasParentFilter . create ( executionType , query , parentType , searchContext ) ;
( isDisabled () ) && ( ( style.disabledFontColor ) != null )
clusterStateRequest . clear () . routingTable ( true ) ;
{ Query rangeQuery = currentMapper . rangeQuery ( part1 , part2 , inclusive , inclusive , parseContext ) ; return wrapSmartNameQuery ( rangeQuery , fieldMappers , parseContext ) ; }
public ShardsIterator randomAllShardsIt () { return new PlainShardsIterator ( allShards , counter . incrementAndGet () ) ; }
List < Object > textsToHighlight = HighlightUtils . loadFieldValues ( fieldMapper , context , hitContext , field . forceSource () ) ;
appendProperties ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , TESTS_ENABLE_MOCK_MODULES , STRING_CONSTANT , STRING_CONSTANT ) ;
{ throw new IllegalArgumentException ( ( ( STRING_CONSTANT + term ) + STRING_CONSTANT ) ) ; }
IndexWriterConfig conf = newIndexWriterConfig ( new KeywordAnalyzer () ) ;
Query query = indexQueryParser . parse ( parser ) . query () ;
termsIndex = indexFieldData . load ( context ) . getBytesValues ( false ) ;
allocation . routingNodes () . assign ( shardRouting , routingNode . nodeId () ) ;
final boolean includeSettings = request . paramAsBoolean ( STRING_CONSTANT , false ) ;
return super . list ( suffix ) ;
event . getListenerActor () . stageToLocalCoordinates ( coords ) ;
{ receivedResponses . remove ( id ) ; throw new ZenPingException ( ( STRING_CONSTANT + ( multicastSocket ) ) , e ) ; }
catch ( Exception e ) { try { channel . sendResponse ( e ) ; } catch ( Exception e1 ) {} }
public void reset () { emissionDelta = NUMBER_CONSTANT ; durationTimer = duration ; start () ; }
return new Tuple ( v1 , environment ) ;
{ return new JsonXContentParser ( JsonXContent.jsonFactory . createParser ( reader ) ) ; }
final List < CandidateGenerator > gens = new java.util.ArrayList ( generators . size () ) ;
GdxTest test = new SuperKoalio () ;
startActivity ( RepoBrowseActivity . createIntent ( user ) ) ;
if ( ( state ) != ( IndexShardState.CLOSED ) ) { refreshScheduledFuture = threadPool . schedule ( refreshInterval , SAME , InternalIndexShard.EngineRefresher . this ) ; }
JsonBuilder . jsonBuilder () . startObject () . field ( STRING_CONSTANT , ( ( STRING_CONSTANT + sOpType ) + STRING_CONSTANT ) ) . endObject ()
{ entry = new InternalFullDateHistogramFacet.FullEntry ( time , NUMBER_CONSTANT , Double.POSITIVE_INFINITY , Double.NEGATIVE_INFINITY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; entries . put ( time , entry ) ; }
if ( idReaderTypeCache != null ) { return new HasParentFilter.Uid.ChildrenDocSet ( reader , parents , idReaderTypeCache ) ; } else { return null ; }
logoSprite . getTextureRegion () . flip ( false , true ) ;
if ( context . includeInAll ( includeInAll , this ) ) { context . allEntries () . addText ( names . fullName () , dateAsString , boost ) ; }
searchContext . addRewrite ( childQuery ) ;
if ( ( searchContext . parsedFilter () ) != null ) { collector = new org.elasticsearch.common.lucene.search.FilteredCollector ( collector , searchContext . parsedFilter () . filter () ) ; }
buckets . add ( new SignificantLongTerms.Bucket ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , InternalAggregations.EMPTY , null ) ) ;
serverTransport . dispatchRequest ( new NettyHttpRequest ( request , e . getChannel () ) , new NettyHttpChannel ( serverTransport , e . getChannel () , request ) ) ;
@ Override public String executor () { if ( request . listenerThreaded () ) { return Names.GENERIC ; } return Names.SAME ; }
if ( ( config.hardKeyboardHidden ) == ( Configuration.HARDKEYBOARDHIDDEN_NO ) ) keyboardAvailable = true ;
Explanation functionExplanation = filterFunction.function . explainScore ( doc , subQueryExpl . getValue () ) ;
DeleteIndexResponse deleteIndexResponse = client () . admin () . indices () . prepareDelete ( STRING_CONSTANT ) . execute () . actionGet () ;
BytesStreamInput inStream = new BytesStreamInput ( outStream . bytes () . toBytes () , false ) ;
newBq . add ( Queries.MATCH_ALL_QUERY , MUST ) ;
if ( ( config.getTouchEventsForLiveWallpaper ) && ( ( Integer . parseInt ( SDK ) ) >= NUMBER_CONSTANT ) ) linkedEngine . setTouchEventsEnabled ( true ) ;
gistId . setText ( ( ( ( getString ( gist ) ) + STRING_CONSTANT ) + ( gist . getId () ) ) ) ;
{ ui . getViewport () . update ( width , height , true ) ; root . setSize ( width , height ) ; }
animTime += ( graphics . getDeltaTime () ) / NUMBER_CONSTANT ;
builder . startObject ( name ) . startObject ( type ) . field ( STRING_CONSTANT , STRING_CONSTANT ) . field ( STRING_CONSTANT , STRING_CONSTANT )
{ if ( smartNameFieldMappers . hasMapper () ) { fieldMapper = smartNameFieldMappers . mapper () ; fieldName = fieldMapper . names () . indexName () ; } }
if ( ThreadLocals.logger . isDebugEnabled () ) { ThreadLocals.logger . trace ( STRING_CONSTANT , args ) ; }
indexShard . acquireSearcher ()
clusterStateRequest . clear () . blocks ( true ) ;
indexRandom ( STRING_CONSTANT , true , builders ) ;
Query query = Queries . newMatchAllQuery () ;
{ return getBounds ( str , NUMBER_CONSTANT , str . length () ) ; }
( actor != null ) && ( login . equals ( actor . getLogin () ) )
BytesValues bytesValues = fieldData . getBytesValues () ;
putMappingRequest . ignoreConflicts ( request . paramAsBoolean ( STRING_CONSTANT , putMappingRequest . ignoreConflicts () ) ) ;
{ super . setV ( v ) ; vertices [ V2 ] = v ; vertices [ V3 ] = v ; }
Array < AssetDescriptor > dependencies = new Array () ;
if ( ( context . searchType () ) != ( SearchType.COUNT ) ) { return false ; }
multiGetRequest . realtime ( request . paramAsBoolean ( STRING_CONSTANT , null ) ) ;
@ Override public void handleException ( TransportException e ) { onOperation ( shard , shardIt , e , false ) ; }
{ scrollId = TransportSearchHelper . buildScrollId ( request . searchType () , queryResults . values () , null ) ; }
aliasMetaData = internalCluster () . clusterService () . state () . metaData () . aliases () . get ( STRING_CONSTANT ) . get ( STRING_CONSTANT )
{ filter = new TermFilter ( new org.apache.lucene.index.Term ( TypeFieldMapper.NAME , type ) ) ; }
try { indexShard . performRecoveryFinalization ( false ) ; channel . sendResponse ( INSTANCE ) ; } finally { receiveSnapshotRecoveryThread = null ; }
l.intensity = NUMBER_CONSTANT ;
preferencesdir = config.preferencesLocation ;
return ClusterState . builder ( currentState ) . metaData ( mdBuilder ) . build () ;
{ builder . treeLevelsByDistance ( DistanceUnit . parse ( fieldNode . toString () , DEFAULT , DEFAULT ) ) ; }
mapTuple = XContentHelper . convertToMap ( data , dataOffset , dataLength , true )
return Long . compare ( v1 , v2 ) ;
Analyzer analyzer = analysisService . analyzer ( STRING_CONSTANT ) . analyzer () ;
@ Override public Type reducedType () { return SortField.STRING ; }
EarClippingTriangulator . areVerticesClockwise ( vertices , offset , count )
reader . document ( doc , visitor ) ;
{ throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( ( ( STRING_CONSTANT + mask ) + STRING_CONSTANT ) + ( name ) ) + STRING_CONSTANT ) ) ; }
builder . startObject ( indexStats . index () , NONE ) ;
ui = new Stage ( graphics . getWidth () , graphics . getHeight () , false ) ;
RoutingNode routingNode = new RoutingNode ( node ) ;
int delimiterIndex = uid . indexOf ( Uid.DELIMITER ) ;
ConfirmDialogFragment . show ( this , ViewGistActivity.REQUEST_CONFIRM_DELETE , STRING_CONSTANT , STRING_CONSTANT ) ;
GdxTest test = new WavTest () ;
try { super . release () ; success = true ; } finally { Releasables . release ( success , bytes , hashes , startOffsets ) ; }
return data ;
final Set < IntsRef > ref = XSpecialOperations . getFiniteStrings ( automaton , ( - NUMBER_CONSTANT ) ) ;
catch ( Throwable e ) { logger . warn ( ( ( STRING_CONSTANT + index ) + STRING_CONSTANT ) , e ) ; }
BytesStream bos = sourceBuilder . buildAsBytesStream ( CONTENT_TYPE ) ;
boolean skip = restTestSuite . getSetupSection () . getSkipSection () . skip ( parseContext . getCurrentVersion () ) ;
{ nestedFilter = context . queryParserService () . parseInnerFilter ( parser ) . filter () ; }
Engine.Searcher searcher = shard . acquireSearcher () ;
ObjectOpenHashSet < String > resolvedNodesIds = new ObjectOpenHashSet ( nodesIds.length ) ;
deleteByQueryRequestBuilder . setIndicesOptions ( IndicesOptions . lenientExpandOpen () ) ;
if ( file () . exists () ) return true ;
int sdkVersion = VERSION.SDK_INT ;
TopChildrenQuery childQuery = new TopChildrenQuery ( searchContext , query , childType , parentType , scoreType , factor , incrementalFactor ) ;
ClusterHealthRequest clusterHealthRequest = clusterHealthRequest ( org.elasticsearch.rest.action.support.RestActions . splitIndices ( request . param ( STRING_CONSTANT ) ) ) ;
if ( ( dist ) > ( maxDist ) ) { dir . mul ( ( - NUMBER_CONSTANT ) ) ; dist = NUMBER_CONSTANT ; }
{ throw new SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
return c1Type . isAssignableFrom ( c2Type ) ;
startActivity ( ViewGistActivity . createIntent ( getActivity () , gist . getId () ) ) ;
@ Required public CountRequest querySource ( QueryBuilder queryBuilder ) { return querySource ( queryBuilder . buildAsString () ) ; }
peerRecoveryStatus . time ()
out . writeBytesReference ( source ) ;
settingsBuilder () . put ( STRING_CONSTANT , between ( cluster () . dataNodes () , DEFAULT_MAX_NUM_SHARDS ) ) . put ( STRING_CONSTANT , NUMBER_CONSTANT )
values = indexFieldData . load ( context ) . getBytesValues ( false ) ;
termsEnum . seekExact ( uidSpare )
Array < Preloader.Asset > assets = new Array < Preloader.Asset > () ;
loader . setMessage ( activity . getString ( loading_collaborators ) ) ;
fieldSelector . add ( NAME ) ;
boolean verbose = request . paramAsBoolean ( STRING_CONSTANT , false ) ;
return new EntriesStats ( sizeInBytes , ( segmentsCount == NUMBER_CONSTANT ? NUMBER_CONSTANT : totalCount / segmentsCount ) ) ;
builder . startObject ( name ) . field ( type ) ;
new org.elasticsearch.action.admin.indices.create.CreateIndexRequest ( bulkRequest ) . index ( index ) . cause ( STRING_CONSTANT ) . masterNodeTimeout ( bulkRequest . timeout () )
if ( context . includeInAll ( includeInAll , this ) ) { context . allEntries () . addText ( names . fullName () , ipAsString , boost ) ; }
if ( constructionContext == null ) { constructionContext = new ConstructionContext () ; constructionContexts . put ( key , constructionContext ) ; }
{ super . onCreate ( savedInstanceState ) ; initialize ( new Bouncy () , false ) ; }
public void handle ( Event event ) ;
{ return parse ( file . read () ) ; }
protected void processDir ( FileProcessor.InputFile inputDir , ArrayList < FileProcessor.InputFile > files ) throws Exception {}
threadPool . executor ( FLUSH )
adapter . addHeader ( commitHeader ) ;
if ( recoveryStatus == null ) { recoveryStatus = recoveryTarget . recoveryStatus ( indexShard ) ; }
if ( ( telegram . getTimestamp () ) > currentTime ) break;
( isOver ( event . getListenerActor () , x , y ) )
public void freeCell ( Cell cell ) { cell . free () ; TableToolkit.cellPool . free ( cell ) ; }
logger . trace ( STRING_CONSTANT , state . version () ) ;
Requests . nodesInfoRequest ( STRING_CONSTANT )
GdxTest test = new JsonModelLoaderTest () ;
transform . translate ( NUMBER_CONSTANT , NUMBER_CONSTANT , ( - NUMBER_CONSTANT ) ) ;
{ new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new SuperJumper () , STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , false ) ; }
renderer = new MD5Renderer ( app . getGraphics () , model , false , true ) ;
( ( worldVertices ) == null ) || ( ( worldVertices.length ) < ( localVertices.length ) )
shardStatus.docs = new DocsStatus () ;
if ( value == null ) { return null ; }
{ if ( smartNameFieldMappers . hasMapper () ) { filter = smartNameFieldMappers . mapper () . rangeFilter ( null , null , true , true , parseContext ) ; } }
{ JsonBuilder builder = JsonBuilder . jsonBuilder () ; toJson ( builder ) ; return builder . string () ; }
Query parentConstantScoreQuery = new org.elasticsearch.index.search.child.ParentConstantScoreQuery ( query , parentType , childrenFilter ) ;
setContentView ( gist_create ) ;
new Runnable () { @ Override public void run () { timeoutUpdateTask . onTimeout ( timeoutUpdateTask . timeout () , task.source ) ; } }
{ listener . onResponse ( new BenchmarkStatusResponse () ) ; }
if ( pathLoadedStopWords != null ) { return Analysis . resolveNamedStopWords ( pathLoadedStopWords , version , ignore_case ) ; }
List < InternalAggregations > subAggregationsList = new java.util.ArrayList ( aggregations . size () ) ;
if ( os == ( TargetOs.MacOsX ) ) { libPrefix = STRING_CONSTANT ; libSuffix = ( is64Bit ? STRING_CONSTANT : STRING_CONSTANT ) + STRING_CONSTANT ; }
NumericUtils . longToPrefixCoded ( longValue , NUMBER_CONSTANT , bytesRef ) ;
{ vertexAttributes . add ( VertexAttribute . ColorUnpacked () ) ; }
boolean skip = setupSection . getSkipSection () . skip ( parseContext . getCurrentVersion () ) ;
sprite = atlas . createSprite ( STRING_CONSTANT ) ;
if ( ( toActor == null ) || ( ! ( toActor . isDescendantOf ( Tree . this ) ) ) ) setOverNode ( null ) ;
{ font = new BitmapFont ( files . internal ( STRING_CONSTANT ) , false ) ; batch = new SpriteBatch () ; }
k ++
TransportSearchQueryThenFetchAction.AsyncAction . this . addShardFailure ( new ShardSearchFailure ( t ) ) ;
return Status.CONT ;
{ return ( annotationType . getAnnotation ( BindingAnnotation . class ) ) != null ; }
if ( title == null ) title = STRING_CONSTANT ;
case id.m_create :
List < FieldMapper > tempMappers = new java.util.ArrayList ( this . mappers ) ;
ParentChildIndexFieldData parentChildIndexFieldData = parseContext . getForField ( parentFieldMapper ) ;
return true ;
TextButtonStyle style = skin . get ( TextButtonStyle . class ) ;
Set < String > indices = nodeEnv . findAllIndices () ;
animTime += graphics . getDeltaTime () ;
if ( indexMetaData != null ) { mdBuilder . put ( indexMetaData , false ) ; }
connection . setFollowRedirects ( httpRequest . getFollowRedirects () ) ;
Settings finalSettings = settingsBuilder () . loadFromClasspath ( settingsSource ) . put ( settings ) . put ( STRING_CONSTANT , id ) . build () ;
request . plugins ()
Calendar calendar = new GregorianCalendar ( TimeZone . getTimeZone ( STRING_CONSTANT ) , Locale.ROOT ) ;
GeoDistance geoDistance = GeoDistance.DEFAULT ;
indexOutput = shard . store () . createOutputRaw ( name ) ;
view.number . setText ( Integer . toString ( issue . getNumber () ) ) ;
int iters = scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
@ Override public CompressedStreamOutput streamOutput ( StreamOutput out ) throws IOException { return new LZFCompressedStreamOutput ( out ) ; }
Array < AssetDescriptor > deps = new Array () ;
field . setBoost ( boost ) ;
catch ( Exception e ) { logger . warn ( STRING_CONSTANT , e , SETTING_AUTO_EXPAND_REPLICAS , autoExpandReplicas ) ; continue; }
setContentView ( issues_filter_list ) ;
if ( STRING_CONSTANT . equals ( type ) ) { noMatchQuery = Queries . newMatchNoDocsQuery () ; }
ios.headerDirs = new String [] { STRING_CONSTANT } ;
{ return new IOSFileHandle ( path , FileType.Internal ) ; }
putMappingRequest . source ( request . content () . toUtf8 () ) ;
return parseContext . cacheFilter ( filter , null ) ;
{ testScroll ( scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , between ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , getRandom () . nextBoolean () , getRandom () . nextBoolean () ) ; }
MapperQueryParser queryParser = parseContext . singleQueryParser ( qpSettings ) ;
{ ( ( Image ) ( actor ) ) . color . b = ( ( float ) ( Math . random () ) ) ; }
GdxTest test = new SuperKoalio () ;
@ Override public void run () { holderToNotify . handler () . handleException ( new NodeDisconnectedException ( node , holderToNotify . action () ) ) ; }
{ BytesStreamOutput os = cachedEntry . bytes () ; ClusterState.Builder . writeTo ( state , os ) ; return os . copiedByteArray () ; }
ensureYellow ( STRING_CONSTANT ) ;
int randomReplicaNumber = between ( NUMBER_CONSTANT , ( ( cluster () . numNodes () ) - NUMBER_CONSTANT ) ) ;
app . log ( STRING_CONSTANT , ( STRING_CONSTANT + ( atlas . getTextures () . size ) ) ) ;
dateTimeFormatter . parser () . parseMillis ( jsonContext . jp () . getText () ) ;
if ( ( path ) == null ) { throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( STRING_CONSTANT + ( getName () ) ) + STRING_CONSTANT ) ) ; }
Throwable ex
getGraphics () . setRenderListener ( new MeshTest () ) ;
setContentView ( login ) ;
BitmapFont font = skin . getFont ( STRING_CONSTANT ) ;
public ResourceLoadingIndicator setList ( final ListView listView ) { listView . addFooterView ( view , null , false ) ; return this ; }
{ Document document = new Document () ; document . add ( new org.apache.lucene.document.StoredField ( UidFieldMapper.NAME , uid ) ) ; return document ; }
{ throw new org.elasticsearch.ElasticsearchIllegalArgumentException ( ( ( STRING_CONSTANT + ( highlighterContext.fieldName ) ) + STRING_CONSTANT ) ) ; }
final BulletConstructor sceneConstructor = new BulletConstructor ( sceneModel , NUMBER_CONSTANT , new com.badlogic.gdx.physics.bullet.btBvhTriangleMeshShape ( sceneModel.meshParts ) ) ;
{ if ( Regex . simpleMatch ( setting . getKey () , dynamicSetting ) ) { return setting . getValue () . validate ( dynamicSetting , value ) ; } }
if ( ! ( scheduledExecutorService . isTerminated () ) ) { scheduledExecutorService . shutdownNow () ; }
client = new TransportClient ( ImmutableSettings . settingsBuilder () . put ( STRING_CONSTANT , true ) . build () ) ;
Class < ? extends Module > defaultDiscoveryModule ;
colors = new float [ value.colors.length ] ;
public boolean povMoved ( Controller controller , int povIndex , PovDirection value ) ;
{ long count = Lucene . count ( searcher . searcher () , query ) ; return count == ( totalHits ) ; }
{ vertexAttributes . add ( VertexAttribute . Color () ) ; }
onValue ( docId , value , value . hashCode () , values ) ;
if ( ( charBuffer [ i ] ) == NUMBER_CONSTANT ) { len = i - NUMBER_CONSTANT ; break; }
if ( idReaderTypeCache != null ) { return new HasChildFilter.Uid.ParentDocSet ( reader , collectedUids , idReaderTypeCache ) ; } else { return null ; }
GdxTest test = new TiledMapDirectLoaderTest () ;
if ( ( telegram . getTimestamp () ) < currentTime ) break;
startActivityForResult ( new Intent ( this , CreateGistActivity . class ) , RequestCodes.GIST_CREATE ) ;
builder . startObject ( getName () ) . field ( type ) ;
EarClippingTriangulator . areVerticesClockwise ( vertices , NUMBER_CONSTANT , vertices.length )
TokenStream ts = field . tokenStream ( null , null ) ;
{ super . onCreate ( savedInstanceState ) ; initialize ( new Metagun () ) ; }
return new LwjglFileHandle ( file , type ) ;
source () . compressionThreshold ( NUMBER_CONSTANT )
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_followers ) ; }
requestBuilder . setField ( STRING_CONSTANT ) ;
assertThat ( response . getMatches () [ NUMBER_CONSTANT ] . getId () . string () , equalTo ( STRING_CONSTANT ) ) ;
RoutingNode routingNode = new RoutingNode ( node . id () , node ) ;
{ assertThat ( docs . getOrd ( i ) , equalTo ( MISSING_ORDINAL ) ) ; }
String language = ( ( parts.length ) != NUMBER_CONSTANT ) ? parts [ NUMBER_CONSTANT ] : STRING_CONSTANT ;
ThreadPool threadPool = new ThreadPool ( getClass () . getName () ) ;
{ builder . startArray ( name ) . value ( lon ) . value ( lat ) . endArray () ; }
if ( request . listenerThreaded () ) { listener = new TransportAction.ThreadedActionListener ( threadPool , listener , logger ) ; }
public void markAsRequired () { this . required = true ; }
this . serverOpenChannels = new OpenChannelsHandler ( logger ) ;
( ny <= yLimit )
{ logger . trace ( STRING_CONSTANT , clusterState . version () ) ; return clusterState . routingTable () . allAssignedShardsGrouped ( concreteIndices , true , true ) ; }
{ throw new IOException ( ( ( STRING_CONSTANT + b ) + STRING_CONSTANT ) ) ; }
reflectiveFactoryFor ( RepoIssueViewHolder . class , RepoIssueViewHolder . computeMaxDigits ( items ) )
int numQueries = scaledRandomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
{ return ( repository . isFork () ) || ( ( repository . getForks () ) > NUMBER_CONSTANT ) ; }
@ Override public void onAckTimeout () { listener . onResponse ( new ClusterStateUpdateResponse ( false ) ) ; }
context . setDepthTest ( GL_LEQUAL , NUMBER_CONSTANT , NUMBER_CONSTANT , true ) ;
RoutingAllocation.Result routingResult = allocationService . reroute ( currentState , request.commands , true ) ;
context . startActivity ( ViewIssueActivity . createIntent ( issue ) ) ;
new MetaDataCreateIndexService.Request ( cause , request . index () ) . settings ( request . settings () ) . mappings ( request . mappings () )
final MultiGetRequest multiGetRequest = new MultiGetRequest ( request ) ;
@ Override protected boolean touchDragged ( float x , float y , int pointer ) { return pressed ; }
{ partIndices [ k ] = ( ( short ) ( indices . getInt ( k ) ) ) ; }
{ if ( ! ( TableToolkit.drawDebug ) ) return; Table . drawDebug ( stage . getActors () , stage . getSpriteBatch () ) ; }
{ return new EngineSearcherTotalHitsMatcher ( Queries . newMatchAllQuery () , totalHits ) ; }
{ if ( ! ( enabled ) ) { return null ; } return new CustomIntegerNumericField ( this , context . sourceLength () ) ; }
keyValues = keyIndexFieldData . load ( context ) . getBytesValues ( true ) ;
pad ( zero ) ;
cache . setColors ( color ) ;
if ( request . hasParam ( STRING_CONSTANT ) ) { ignoreIndices = IgnoreIndices . fromString ( request . param ( STRING_CONSTANT ) ) ; }
if ( filter != null ) { context . parsedFilter ( filter ) ; }
pipeline . addLast ( STRING_CONSTANT , new MemcachedDecoder ( logger ) ) ;
return new IOSApplication ( new DownloadTest () , config ) ;
if ( ( largest ) != ( - NUMBER_CONSTANT ) ) { builder . field ( ThreadPoolStats.Fields.LARGEST , largest ) ; }
IndexReader reader = IndexReader . open ( indexWriter , true ) ;
if ( ( other.type ) != ( other.type ) ) return false ;
{ Filter facetFilter = context . queryParserService () . parseInnerFilter ( parser ) . filter () ; return new FilterFacetExecutor ( facetFilter ) ; }
jniDestroyBody ( addr , body.addr ) ;
channel . sendResponse ( new XContentRestResponse ( request , ( foundAny || ( ( indices.length ) == NUMBER_CONSTANT ) ? RestStatus.OK : RestStatus.NOT_FOUND ) , builder ) ) ;
{ return Integer . compare ( o1 . order () , o2 . order () ) ; }
float l2 = Intersector.tmp . sub ( start.x , start.y , NUMBER_CONSTANT ) . len2 () ;
public void destroy () { canvas . getContext () . makeCurrent () ; listener . dispose () ; }
setContentView ( pager_with_title ) ;
final Version version = Lucene . parseVersionLenient ( info.info . getVersion () , LUCENE_3_0 ) ;
if ( ( time ) > ( model.skeleton.animations . get ( animation ) . totalDuration ) ) { time = NUMBER_CONSTANT ; }
handles [ count ] = child ( path ) ;
{ return inflater . inflate ( comment_list_view , null ) ; }
Account account = new Account ( user . getLogin () , Constants.GITHUB_ACCOUNT_TYPE ) ;
LabelsDrawable drawable = new LabelsDrawable ( assigneeText . getTextSize () , ServiceHelper . getDisplayWidth ( labelsArea ) , issue . getLabels () ) ;
if ( Queries . isConstantMatchAllQuery ( fQuery . getQuery () ) ) { return fQuery . getFilter () ; }
handles [ count ] = new AndroidFileHandle ( assets , new File ( file , path ) , type ) ;
renderBatch . render ( instances . get ( i ) , lights ) ;
Query q = getFieldQuerySingle ( mField , queryText , quoted ) ;
ClusterHealthResponse clusterHealth = client ( STRING_CONSTANT ) . admin () . cluster () . health ( clusterHealthRequest () . waitForYellowStatus () ) . actionGet () ;
DirectoryReader reader = DirectoryReader . open ( indexWriter , true ) ;
IntArray hashes = NON_RECYCLING_INSTANCE . newIntArray ( numberOfValues ) ;
( decoder . readSamples ( stereoSamples ) ) > NUMBER_CONSTANT
QueriesLoaderCollector queryCollector = new QueriesLoaderCollector ( PercolatorQueriesRegistry . this , logger , mapperService , indexFieldDataService ) ;
spare.supersetDf = termsAggFactory . getBackgroundFrequency ( spare.term ) ;
return BlobStoreIndexShardGateway . buildVirtualBlobs ( indexContainer , indexContainer . listBlobs () , null ) ;
if ( spare == null ) { spare = new LongTerms.Bucket ( NUMBER_CONSTANT , NUMBER_CONSTANT , null , showTermDocCountError , NUMBER_CONSTANT , formatter ) ; }
if ( spare == null ) { spare = new SignificantLongTerms.Bucket ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , null , formatter ) ; }
final BulletConstructor sceneConstructor = new BulletConstructor ( sceneModel , NUMBER_CONSTANT , new com.badlogic.gdx.physics.bullet.btBvhTriangleMeshShape ( true , sceneModel ) ) ;
map . getLayers () . addLayer ( layer ) ;
new org.elasticsearch.search.internal.ShardSearchRequest ( request ) . types ( new String [] { request . type () } ) . filteringAliases ( request . filteringAlias () )
LocalAllocateDangledIndices.AllocateDangledRequest request = new LocalAllocateDangledIndices.AllocateDangledRequest ( clusterService . localNode () , indices ) ;
boolean defaultIsolation = settings . getAsBoolean ( STRING_CONSTANT , Boolean.FALSE ) ;
if ( ! ( request . hasParam ( STRING_CONSTANT ) ) ) { builder . prettyPrint () . lfAtEnd () ; }
catch ( Throwable e ) { onOperation ( shard , shardIt , e ) ; }
return new IOSApplication ( new DownloadTest () , config ) ;
project.files . add ( new ProjectFile ( STRING_CONSTANT ) ) ;
GdxTest test = new com.badlogic.gdx.tests.ImmediateModeRendererTest () ;
deps = Array . of ( AssetDescriptor . class ) ;
AnalyzeResponse analyzeResponse = client . admin () . indices () . prepareAnalyze ( STRING_CONSTANT , STRING_CONSTANT ) . execute () . actionGet () ;
{ throw new IllegalArgumentException ( ( ( STRING_CONSTANT + ( name ) ) + STRING_CONSTANT ) ) ; }
{ return Streams . copyToString ( new InputStreamReader ( resolveConfig ( path ) . openStream () , Streams.UTF8 ) ) ; }
@ Override public DisplayMode [] getDisplayModes () { return new DisplayMode [] { getDesktopDisplayMode () } ; }
FrameBuffer.defaultFramebufferHandle = intbuf . get () ;
GdxTest test = new ProgressiveJPEGTest () ;
internalSearchRequest ( shard , shardsIts . size () , request , filteringAliases , startTime )
{ BytesRef bytesRef = new BytesRef () ; NumericUtils . longToPrefixCoded ( val , PRECISION_STEP_DEFAULT , bytesRef ) ; return bytesRef ; }
{ super . onActivityCreated ( savedInstanceState ) ; setEmptyText ( no_people ) ; }
( focusedActor [ pointer ] ) != null
{ docTerms = indexFieldData . load ( context ) . getBytesValues () ; return this ; }
renderer . begin ( Filled ) ;
{ return setMinimumShouldMatch ( ( ( Math . round ( ( percentTermsToMatch * NUMBER_CONSTANT ) ) ) + STRING_CONSTANT ) ) ; }
TermsEnum termsEnum = afd . getBytesValues () . getTermsEnum () ;
internalTickCallback = new InternalTickTest.TestInternalTickCallback ( world.dynamicsWorld ) ;
parentChildIndexFieldData = parseContext . getForField ( parentFieldMapper ) ;
{ return XContentHelper . convertToMap ( bytes , offset , length , false ) . v2 () ; }
@ Override public String [] names () { return new String [] { TermsFilterParser.NAME , STRING_CONSTANT } ; }
e.modelInstance.transform . getTranslation ( FrustumCullingTest.tmpV ) ;
File [] relativePaths = file () . listFiles ( filter ) ;
{ FileSystemUtils . deleteRecursively ( dataDirToClean . toArray ( new File [ NUMBER_CONSTANT ] ) ) ; }
if ( typeAfd != null ) { return typeAfd ; } else { return AtomicFieldData.WithOrdinals.EMPTY ; }
{ updateSprite () ; if ( ( region . getTexture () ) != null ) { sprite . draw ( batch , parentAlpha ) ; } }
GdxTest test = new AssetManagerTest () ;
termVectorRequest . index ( clusterState . metaData () . concreteSingleIndex ( termVectorRequest . index () ) ) ;
LabelsDrawable drawable = new LabelsDrawable ( createdText . getTextSize () , ServiceHelper . getDisplayWidth ( labelsArea ) , issue . getLabels () ) ;
{ request . index ( state . metaData () . concreteSingleIndex ( request . index () ) ) ; }
currentSet = new CandidateSet ( Candidate.EMPTY , generator . createCandidate ( BytesRef . deepCopyOf ( term ) , true ) ) ;
assigneeTask . edit ( arguments . getString ( AssigneeDialogFragment.ARG_SELECTED ) ) ;
if ( STRING_CONSTANT . equals ( preference ) ) { return indexShard . primaryActiveShardIt () ; }
{ throw new org.elasticsearch.search.builder.SearchSourceBuilderException ( ( ( ( ( STRING_CONSTANT + mask ) + STRING_CONSTANT ) + ( getName () ) ) + STRING_CONSTANT ) ) ; }
searcher . close () ;
{ return ( ( style.vScrollKnob ) == null ) || ( ! ( scrollY ) ) ? NUMBER_CONSTANT : style.vScrollKnob . getMinWidth () ; }
{ textures [ i ] . texture = null ; if ( ( weights ) != null ) weights [ i ] = NUMBER_CONSTANT ; }
injector . getInstance ( MapperService . class ) . documentMapper ( STRING_CONSTANT ) . parse ( copyToBytesFromClasspath ( STRING_CONSTANT ) ) ;
injector . getInstance ( org.elasticsearch.cache.recycler.CacheRecycler . class ) . close () ;
final AlertDialog dialog = LightAlertDialog . create ( getActivity () ) ;
if ( op . parsedDoc () . mappingsModified () ) { updateMappingOnMaster ( request ) ; }
{ return new ShardOptimizeRequest ( shard . shardId () , request ) ; }
countRequest . minScore ( request . paramAsFloat ( STRING_CONSTANT , DEFAULT_MIN_SCORE ) ) ;
Array < K > keys = this . keys ;
if ( ( ! ( child.touchable ) ) || ( ! ( child.visible ) ) ) continue;
{ IOSApplicationConfiguration config = new IOSApplicationConfiguration () ; return new IOSApplication ( new PingPongSocketExample () , config ) ; }
final LongHash longHash = new LongHash ( randomIntBetween ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , maxLoadFactor , BigArraysTests . randombigArrays () ) ;
cluster () . wipeIndices ( STRING_CONSTANT ) ;
facets () . facet ( STRING_CONSTANT , termQuery ( STRING_CONSTANT , STRING_CONSTANT ) , true ) . facet ( STRING_CONSTANT , termQuery ( STRING_CONSTANT , STRING_CONSTANT ) )
new com.badlogic.gdx.backends.lwjgl.LwjglApplication ( new AssetManagerTest () , config ) ;
SnapshotArray < Actor > children = parent . getChildren () ;
valuesLoaded = false ;
return new IOSApplication ( new BulletTestCollection () , config ) ;
MapLayer layer = map . getLayers () . getLayer ( layerIdx ) ;
Actor actor = stage . hit ( stageCoords.x , stageCoords.y ) ;
public Similarity searchSimilarity () { return ( indexQueryParser.similarityService ) != null ? indexQueryParser.similarityService . similarity () : null ; }
existing.aliases . add ( rect.name ) ;
catch ( Exception e ) { logger . warn ( STRING_CONSTANT , e , index , mappingType , mappingSource ) ; }
ClusterChangedEvent clusterChangedEvent = new ClusterChangedEvent ( source , clusterState , previousClusterState ) ;
public SearchSourceBuilder explain ( Boolean explain ) { this . explain = explain ; return this ; }
spare.supersetDf = termsAggFactory . getBackgroundFrequency ( spare.termBytes ) ;
WorldManifold manifold = contact . getWorldManifold () ;
builder . timeValueField ( FlushStats.Fields.TOTAL_TIME_IN_MILLIS , FlushStats.Fields.TOTAL_TIME , totalTimeInMillis ) ;
return new IOSApplication ( new BulletTestCollection () , config ) ;
